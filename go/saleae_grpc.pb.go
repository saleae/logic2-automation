//
// Saleae gRPC Automation API 1.0.0
//
// This file contains the protobuf description for the automation API integrated
// into the Saleae Logic 2 software, versions 2.3.56 and later.
//
// Please see https://saleae.github.io/logic2-automation/ for more information on
// the gRPC API and the Python wrapper library.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: saleae.proto

package logic2automation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_GetAppInfo_FullMethodName              = "/saleae.automation.Manager/GetAppInfo"
	Manager_GetDevices_FullMethodName              = "/saleae.automation.Manager/GetDevices"
	Manager_StartCapture_FullMethodName            = "/saleae.automation.Manager/StartCapture"
	Manager_StopCapture_FullMethodName             = "/saleae.automation.Manager/StopCapture"
	Manager_WaitCapture_FullMethodName             = "/saleae.automation.Manager/WaitCapture"
	Manager_LoadCapture_FullMethodName             = "/saleae.automation.Manager/LoadCapture"
	Manager_SaveCapture_FullMethodName             = "/saleae.automation.Manager/SaveCapture"
	Manager_CloseCapture_FullMethodName            = "/saleae.automation.Manager/CloseCapture"
	Manager_AddAnalyzer_FullMethodName             = "/saleae.automation.Manager/AddAnalyzer"
	Manager_RemoveAnalyzer_FullMethodName          = "/saleae.automation.Manager/RemoveAnalyzer"
	Manager_AddHighLevelAnalyzer_FullMethodName    = "/saleae.automation.Manager/AddHighLevelAnalyzer"
	Manager_RemoveHighLevelAnalyzer_FullMethodName = "/saleae.automation.Manager/RemoveHighLevelAnalyzer"
	Manager_ExportRawDataCsv_FullMethodName        = "/saleae.automation.Manager/ExportRawDataCsv"
	Manager_ExportRawDataBinary_FullMethodName     = "/saleae.automation.Manager/ExportRawDataBinary"
	Manager_ExportDataTableCsv_FullMethodName      = "/saleae.automation.Manager/ExportDataTableCsv"
	Manager_LegacyExportAnalyzer_FullMethodName    = "/saleae.automation.Manager/LegacyExportAnalyzer"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	GetAppInfo(ctx context.Context, in *GetAppInfoRequest, opts ...grpc.CallOption) (*GetAppInfoReply, error)
	// Get list of connected devices.
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesReply, error)
	// Start a capture
	StartCapture(ctx context.Context, in *StartCaptureRequest, opts ...grpc.CallOption) (*StartCaptureReply, error)
	// Stop an active capture
	StopCapture(ctx context.Context, in *StopCaptureRequest, opts ...grpc.CallOption) (*StopCaptureReply, error)
	// Wait until a capture has completed
	WaitCapture(ctx context.Context, in *WaitCaptureRequest, opts ...grpc.CallOption) (*WaitCaptureReply, error)
	// Load a capture from file.
	LoadCapture(ctx context.Context, in *LoadCaptureRequest, opts ...grpc.CallOption) (*LoadCaptureReply, error)
	// Save a capture to file.
	SaveCapture(ctx context.Context, in *SaveCaptureRequest, opts ...grpc.CallOption) (*SaveCaptureReply, error)
	// Close a capture.
	// Note: It is recommended to close a capture once it is no longer being used
	// so that any consumed resources can be released.
	CloseCapture(ctx context.Context, in *CloseCaptureRequest, opts ...grpc.CallOption) (*CloseCaptureReply, error)
	// Add an analyzer to a capture.
	AddAnalyzer(ctx context.Context, in *AddAnalyzerRequest, opts ...grpc.CallOption) (*AddAnalyzerReply, error)
	// Remove an analyzer from a capture.
	RemoveAnalyzer(ctx context.Context, in *RemoveAnalyzerRequest, opts ...grpc.CallOption) (*RemoveAnalyzerReply, error)
	// Add a high level analyzer to a capture.
	AddHighLevelAnalyzer(ctx context.Context, in *AddHighLevelAnalyzerRequest, opts ...grpc.CallOption) (*AddHighLevelAnalyzerReply, error)
	// Remove a high level analyzer from a capture.
	RemoveHighLevelAnalyzer(ctx context.Context, in *RemoveHighLevelAnalyzerRequest, opts ...grpc.CallOption) (*RemoveHighLevelAnalyzerReply, error)
	// Export raw channel data to CSV files.
	ExportRawDataCsv(ctx context.Context, in *ExportRawDataCsvRequest, opts ...grpc.CallOption) (*ExportRawDataCsvReply, error)
	// Export raw channel data to binary files.
	ExportRawDataBinary(ctx context.Context, in *ExportRawDataBinaryRequest, opts ...grpc.CallOption) (*ExportRawDataBinaryReply, error)
	// Export analyzer data to CSV file.
	ExportDataTableCsv(ctx context.Context, in *ExportDataTableCsvRequest, opts ...grpc.CallOption) (*ExportDataTableCsvReply, error)
	// Export custom analyzer export data to file.
	LegacyExportAnalyzer(ctx context.Context, in *LegacyExportAnalyzerRequest, opts ...grpc.CallOption) (*LegacyExportAnalyzerReply, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) GetAppInfo(ctx context.Context, in *GetAppInfoRequest, opts ...grpc.CallOption) (*GetAppInfoReply, error) {
	out := new(GetAppInfoReply)
	err := c.cc.Invoke(ctx, Manager_GetAppInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesReply, error) {
	out := new(GetDevicesReply)
	err := c.cc.Invoke(ctx, Manager_GetDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) StartCapture(ctx context.Context, in *StartCaptureRequest, opts ...grpc.CallOption) (*StartCaptureReply, error) {
	out := new(StartCaptureReply)
	err := c.cc.Invoke(ctx, Manager_StartCapture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) StopCapture(ctx context.Context, in *StopCaptureRequest, opts ...grpc.CallOption) (*StopCaptureReply, error) {
	out := new(StopCaptureReply)
	err := c.cc.Invoke(ctx, Manager_StopCapture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) WaitCapture(ctx context.Context, in *WaitCaptureRequest, opts ...grpc.CallOption) (*WaitCaptureReply, error) {
	out := new(WaitCaptureReply)
	err := c.cc.Invoke(ctx, Manager_WaitCapture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) LoadCapture(ctx context.Context, in *LoadCaptureRequest, opts ...grpc.CallOption) (*LoadCaptureReply, error) {
	out := new(LoadCaptureReply)
	err := c.cc.Invoke(ctx, Manager_LoadCapture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SaveCapture(ctx context.Context, in *SaveCaptureRequest, opts ...grpc.CallOption) (*SaveCaptureReply, error) {
	out := new(SaveCaptureReply)
	err := c.cc.Invoke(ctx, Manager_SaveCapture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CloseCapture(ctx context.Context, in *CloseCaptureRequest, opts ...grpc.CallOption) (*CloseCaptureReply, error) {
	out := new(CloseCaptureReply)
	err := c.cc.Invoke(ctx, Manager_CloseCapture_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) AddAnalyzer(ctx context.Context, in *AddAnalyzerRequest, opts ...grpc.CallOption) (*AddAnalyzerReply, error) {
	out := new(AddAnalyzerReply)
	err := c.cc.Invoke(ctx, Manager_AddAnalyzer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) RemoveAnalyzer(ctx context.Context, in *RemoveAnalyzerRequest, opts ...grpc.CallOption) (*RemoveAnalyzerReply, error) {
	out := new(RemoveAnalyzerReply)
	err := c.cc.Invoke(ctx, Manager_RemoveAnalyzer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) AddHighLevelAnalyzer(ctx context.Context, in *AddHighLevelAnalyzerRequest, opts ...grpc.CallOption) (*AddHighLevelAnalyzerReply, error) {
	out := new(AddHighLevelAnalyzerReply)
	err := c.cc.Invoke(ctx, Manager_AddHighLevelAnalyzer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) RemoveHighLevelAnalyzer(ctx context.Context, in *RemoveHighLevelAnalyzerRequest, opts ...grpc.CallOption) (*RemoveHighLevelAnalyzerReply, error) {
	out := new(RemoveHighLevelAnalyzerReply)
	err := c.cc.Invoke(ctx, Manager_RemoveHighLevelAnalyzer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExportRawDataCsv(ctx context.Context, in *ExportRawDataCsvRequest, opts ...grpc.CallOption) (*ExportRawDataCsvReply, error) {
	out := new(ExportRawDataCsvReply)
	err := c.cc.Invoke(ctx, Manager_ExportRawDataCsv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExportRawDataBinary(ctx context.Context, in *ExportRawDataBinaryRequest, opts ...grpc.CallOption) (*ExportRawDataBinaryReply, error) {
	out := new(ExportRawDataBinaryReply)
	err := c.cc.Invoke(ctx, Manager_ExportRawDataBinary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExportDataTableCsv(ctx context.Context, in *ExportDataTableCsvRequest, opts ...grpc.CallOption) (*ExportDataTableCsvReply, error) {
	out := new(ExportDataTableCsvReply)
	err := c.cc.Invoke(ctx, Manager_ExportDataTableCsv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) LegacyExportAnalyzer(ctx context.Context, in *LegacyExportAnalyzerRequest, opts ...grpc.CallOption) (*LegacyExportAnalyzerReply, error) {
	out := new(LegacyExportAnalyzerReply)
	err := c.cc.Invoke(ctx, Manager_LegacyExportAnalyzer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	GetAppInfo(context.Context, *GetAppInfoRequest) (*GetAppInfoReply, error)
	// Get list of connected devices.
	GetDevices(context.Context, *GetDevicesRequest) (*GetDevicesReply, error)
	// Start a capture
	StartCapture(context.Context, *StartCaptureRequest) (*StartCaptureReply, error)
	// Stop an active capture
	StopCapture(context.Context, *StopCaptureRequest) (*StopCaptureReply, error)
	// Wait until a capture has completed
	WaitCapture(context.Context, *WaitCaptureRequest) (*WaitCaptureReply, error)
	// Load a capture from file.
	LoadCapture(context.Context, *LoadCaptureRequest) (*LoadCaptureReply, error)
	// Save a capture to file.
	SaveCapture(context.Context, *SaveCaptureRequest) (*SaveCaptureReply, error)
	// Close a capture.
	// Note: It is recommended to close a capture once it is no longer being used
	// so that any consumed resources can be released.
	CloseCapture(context.Context, *CloseCaptureRequest) (*CloseCaptureReply, error)
	// Add an analyzer to a capture.
	AddAnalyzer(context.Context, *AddAnalyzerRequest) (*AddAnalyzerReply, error)
	// Remove an analyzer from a capture.
	RemoveAnalyzer(context.Context, *RemoveAnalyzerRequest) (*RemoveAnalyzerReply, error)
	// Add a high level analyzer to a capture.
	AddHighLevelAnalyzer(context.Context, *AddHighLevelAnalyzerRequest) (*AddHighLevelAnalyzerReply, error)
	// Remove a high level analyzer from a capture.
	RemoveHighLevelAnalyzer(context.Context, *RemoveHighLevelAnalyzerRequest) (*RemoveHighLevelAnalyzerReply, error)
	// Export raw channel data to CSV files.
	ExportRawDataCsv(context.Context, *ExportRawDataCsvRequest) (*ExportRawDataCsvReply, error)
	// Export raw channel data to binary files.
	ExportRawDataBinary(context.Context, *ExportRawDataBinaryRequest) (*ExportRawDataBinaryReply, error)
	// Export analyzer data to CSV file.
	ExportDataTableCsv(context.Context, *ExportDataTableCsvRequest) (*ExportDataTableCsvReply, error)
	// Export custom analyzer export data to file.
	LegacyExportAnalyzer(context.Context, *LegacyExportAnalyzerRequest) (*LegacyExportAnalyzerReply, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) GetAppInfo(context.Context, *GetAppInfoRequest) (*GetAppInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppInfo not implemented")
}
func (UnimplementedManagerServer) GetDevices(context.Context, *GetDevicesRequest) (*GetDevicesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedManagerServer) StartCapture(context.Context, *StartCaptureRequest) (*StartCaptureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCapture not implemented")
}
func (UnimplementedManagerServer) StopCapture(context.Context, *StopCaptureRequest) (*StopCaptureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCapture not implemented")
}
func (UnimplementedManagerServer) WaitCapture(context.Context, *WaitCaptureRequest) (*WaitCaptureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitCapture not implemented")
}
func (UnimplementedManagerServer) LoadCapture(context.Context, *LoadCaptureRequest) (*LoadCaptureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCapture not implemented")
}
func (UnimplementedManagerServer) SaveCapture(context.Context, *SaveCaptureRequest) (*SaveCaptureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCapture not implemented")
}
func (UnimplementedManagerServer) CloseCapture(context.Context, *CloseCaptureRequest) (*CloseCaptureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseCapture not implemented")
}
func (UnimplementedManagerServer) AddAnalyzer(context.Context, *AddAnalyzerRequest) (*AddAnalyzerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnalyzer not implemented")
}
func (UnimplementedManagerServer) RemoveAnalyzer(context.Context, *RemoveAnalyzerRequest) (*RemoveAnalyzerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAnalyzer not implemented")
}
func (UnimplementedManagerServer) AddHighLevelAnalyzer(context.Context, *AddHighLevelAnalyzerRequest) (*AddHighLevelAnalyzerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHighLevelAnalyzer not implemented")
}
func (UnimplementedManagerServer) RemoveHighLevelAnalyzer(context.Context, *RemoveHighLevelAnalyzerRequest) (*RemoveHighLevelAnalyzerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHighLevelAnalyzer not implemented")
}
func (UnimplementedManagerServer) ExportRawDataCsv(context.Context, *ExportRawDataCsvRequest) (*ExportRawDataCsvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportRawDataCsv not implemented")
}
func (UnimplementedManagerServer) ExportRawDataBinary(context.Context, *ExportRawDataBinaryRequest) (*ExportRawDataBinaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportRawDataBinary not implemented")
}
func (UnimplementedManagerServer) ExportDataTableCsv(context.Context, *ExportDataTableCsvRequest) (*ExportDataTableCsvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportDataTableCsv not implemented")
}
func (UnimplementedManagerServer) LegacyExportAnalyzer(context.Context, *LegacyExportAnalyzerRequest) (*LegacyExportAnalyzerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegacyExportAnalyzer not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_GetAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetAppInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppInfo(ctx, req.(*GetAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetDevices(ctx, req.(*GetDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_StartCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).StartCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_StartCapture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).StartCapture(ctx, req.(*StartCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_StopCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).StopCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_StopCapture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).StopCapture(ctx, req.(*StopCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_WaitCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).WaitCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_WaitCapture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).WaitCapture(ctx, req.(*WaitCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_LoadCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).LoadCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_LoadCapture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).LoadCapture(ctx, req.(*LoadCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SaveCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SaveCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_SaveCapture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SaveCapture(ctx, req.(*SaveCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CloseCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CloseCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CloseCapture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CloseCapture(ctx, req.(*CloseCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_AddAnalyzer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAnalyzerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).AddAnalyzer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_AddAnalyzer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).AddAnalyzer(ctx, req.(*AddAnalyzerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_RemoveAnalyzer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAnalyzerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).RemoveAnalyzer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_RemoveAnalyzer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).RemoveAnalyzer(ctx, req.(*RemoveAnalyzerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_AddHighLevelAnalyzer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHighLevelAnalyzerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).AddHighLevelAnalyzer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_AddHighLevelAnalyzer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).AddHighLevelAnalyzer(ctx, req.(*AddHighLevelAnalyzerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_RemoveHighLevelAnalyzer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHighLevelAnalyzerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).RemoveHighLevelAnalyzer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_RemoveHighLevelAnalyzer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).RemoveHighLevelAnalyzer(ctx, req.(*RemoveHighLevelAnalyzerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExportRawDataCsv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRawDataCsvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExportRawDataCsv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExportRawDataCsv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExportRawDataCsv(ctx, req.(*ExportRawDataCsvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExportRawDataBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRawDataBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExportRawDataBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExportRawDataBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExportRawDataBinary(ctx, req.(*ExportRawDataBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExportDataTableCsv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportDataTableCsvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExportDataTableCsv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExportDataTableCsv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExportDataTableCsv(ctx, req.(*ExportDataTableCsvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_LegacyExportAnalyzer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LegacyExportAnalyzerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).LegacyExportAnalyzer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_LegacyExportAnalyzer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).LegacyExportAnalyzer(ctx, req.(*LegacyExportAnalyzerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saleae.automation.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppInfo",
			Handler:    _Manager_GetAppInfo_Handler,
		},
		{
			MethodName: "GetDevices",
			Handler:    _Manager_GetDevices_Handler,
		},
		{
			MethodName: "StartCapture",
			Handler:    _Manager_StartCapture_Handler,
		},
		{
			MethodName: "StopCapture",
			Handler:    _Manager_StopCapture_Handler,
		},
		{
			MethodName: "WaitCapture",
			Handler:    _Manager_WaitCapture_Handler,
		},
		{
			MethodName: "LoadCapture",
			Handler:    _Manager_LoadCapture_Handler,
		},
		{
			MethodName: "SaveCapture",
			Handler:    _Manager_SaveCapture_Handler,
		},
		{
			MethodName: "CloseCapture",
			Handler:    _Manager_CloseCapture_Handler,
		},
		{
			MethodName: "AddAnalyzer",
			Handler:    _Manager_AddAnalyzer_Handler,
		},
		{
			MethodName: "RemoveAnalyzer",
			Handler:    _Manager_RemoveAnalyzer_Handler,
		},
		{
			MethodName: "AddHighLevelAnalyzer",
			Handler:    _Manager_AddHighLevelAnalyzer_Handler,
		},
		{
			MethodName: "RemoveHighLevelAnalyzer",
			Handler:    _Manager_RemoveHighLevelAnalyzer_Handler,
		},
		{
			MethodName: "ExportRawDataCsv",
			Handler:    _Manager_ExportRawDataCsv_Handler,
		},
		{
			MethodName: "ExportRawDataBinary",
			Handler:    _Manager_ExportRawDataBinary_Handler,
		},
		{
			MethodName: "ExportDataTableCsv",
			Handler:    _Manager_ExportDataTableCsv_Handler,
		},
		{
			MethodName: "LegacyExportAnalyzer",
			Handler:    _Manager_LegacyExportAnalyzer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "saleae.proto",
}
