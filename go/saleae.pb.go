//
// Saleae gRPC Automation API 1.0.0
//
// This file contains the protobuf description for the automation API integrated
// into the Saleae Logic 2 software, versions 2.3.56 and later.
//
// Please see https://saleae.github.io/logic2-automation/ for more information on
// the gRPC API and the Python wrapper library.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: saleae.proto

package logic2automation

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This enum is not used in any messages. It is here to version this .proto file, and make it accessible to
// users of this .proto file. Please see the automation API documentation for more info on
// versioning (link at top of file).
type ThisApiVersion int32

const (
	// ZERO value here to appease protobuf - the first enum value must be zero.
	ThisApiVersion_THIS_API_VERSION_ZERO  ThisApiVersion = 0
	ThisApiVersion_THIS_API_VERSION_MAJOR ThisApiVersion = 1
	ThisApiVersion_THIS_API_VERSION_MINOR ThisApiVersion = 0
	ThisApiVersion_THIS_API_VERSION_PATCH ThisApiVersion = 0
)

// Enum value maps for ThisApiVersion.
var (
	ThisApiVersion_name = map[int32]string{
		0: "THIS_API_VERSION_ZERO",
		1: "THIS_API_VERSION_MAJOR",
		// Duplicate value: 0: "THIS_API_VERSION_MINOR",
		// Duplicate value: 0: "THIS_API_VERSION_PATCH",
	}
	ThisApiVersion_value = map[string]int32{
		"THIS_API_VERSION_ZERO":  0,
		"THIS_API_VERSION_MAJOR": 1,
		"THIS_API_VERSION_MINOR": 0,
		"THIS_API_VERSION_PATCH": 0,
	}
)

func (x ThisApiVersion) Enum() *ThisApiVersion {
	p := new(ThisApiVersion)
	*p = x
	return p
}

func (x ThisApiVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThisApiVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_saleae_proto_enumTypes[0].Descriptor()
}

func (ThisApiVersion) Type() protoreflect.EnumType {
	return &file_saleae_proto_enumTypes[0]
}

func (x ThisApiVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThisApiVersion.Descriptor instead.
func (ThisApiVersion) EnumDescriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{0}
}

type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_UNSPECIFIED ErrorCode = 0 // Not used
	// Unexpected Saleae Internal Error.
	ErrorCode_ERROR_CODE_INTERNAL_EXCEPTION ErrorCode = 1
	// Request is invalid, usually because of invalid arguments.
	//
	// Examples:
	//
	//	Invalid Capture Id - capture does not exist
	//	Missing filepath
	ErrorCode_ERROR_CODE_INVALID_REQUEST ErrorCode = 10
	// Loading the capture failed
	ErrorCode_ERROR_CODE_LOAD_CAPTURE_FAILED ErrorCode = 20
	// Export failed
	ErrorCode_ERROR_CODE_EXPORT_FAILED ErrorCode = 21
	// The specified device id does not exist
	ErrorCode_ERROR_CODE_MISSING_DEVICE ErrorCode = 50
	// There was a device error during the capture
	ErrorCode_ERROR_CODE_DEVICE_ERROR ErrorCode = 51
	// Ran out of memory during capture
	ErrorCode_ERROR_CODE_OUT_OF_MEMORY ErrorCode = 52
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "ERROR_CODE_UNSPECIFIED",
		1:  "ERROR_CODE_INTERNAL_EXCEPTION",
		10: "ERROR_CODE_INVALID_REQUEST",
		20: "ERROR_CODE_LOAD_CAPTURE_FAILED",
		21: "ERROR_CODE_EXPORT_FAILED",
		50: "ERROR_CODE_MISSING_DEVICE",
		51: "ERROR_CODE_DEVICE_ERROR",
		52: "ERROR_CODE_OUT_OF_MEMORY",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_UNSPECIFIED":         0,
		"ERROR_CODE_INTERNAL_EXCEPTION":  1,
		"ERROR_CODE_INVALID_REQUEST":     10,
		"ERROR_CODE_LOAD_CAPTURE_FAILED": 20,
		"ERROR_CODE_EXPORT_FAILED":       21,
		"ERROR_CODE_MISSING_DEVICE":      50,
		"ERROR_CODE_DEVICE_ERROR":        51,
		"ERROR_CODE_OUT_OF_MEMORY":       52,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_saleae_proto_enumTypes[1].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_saleae_proto_enumTypes[1]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{1}
}

type RadixType int32

const (
	RadixType_RADIX_TYPE_UNSPECIFIED RadixType = 0
	RadixType_RADIX_TYPE_BINARY      RadixType = 1
	RadixType_RADIX_TYPE_DECIMAL     RadixType = 2
	RadixType_RADIX_TYPE_HEXADECIMAL RadixType = 3
	RadixType_RADIX_TYPE_ASCII       RadixType = 4
)

// Enum value maps for RadixType.
var (
	RadixType_name = map[int32]string{
		0: "RADIX_TYPE_UNSPECIFIED",
		1: "RADIX_TYPE_BINARY",
		2: "RADIX_TYPE_DECIMAL",
		3: "RADIX_TYPE_HEXADECIMAL",
		4: "RADIX_TYPE_ASCII",
	}
	RadixType_value = map[string]int32{
		"RADIX_TYPE_UNSPECIFIED": 0,
		"RADIX_TYPE_BINARY":      1,
		"RADIX_TYPE_DECIMAL":     2,
		"RADIX_TYPE_HEXADECIMAL": 3,
		"RADIX_TYPE_ASCII":       4,
	}
)

func (x RadixType) Enum() *RadixType {
	p := new(RadixType)
	*p = x
	return p
}

func (x RadixType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RadixType) Descriptor() protoreflect.EnumDescriptor {
	return file_saleae_proto_enumTypes[2].Descriptor()
}

func (RadixType) Type() protoreflect.EnumType {
	return &file_saleae_proto_enumTypes[2]
}

func (x RadixType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RadixType.Descriptor instead.
func (RadixType) EnumDescriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{2}
}

type DeviceType int32

const (
	// Invalid Device Type
	DeviceType_DEVICE_TYPE_UNSPECIFIED DeviceType = 0
	// Saleae Logic - NOT SUPPORTED
	DeviceType_DEVICE_TYPE_LOGIC DeviceType = 1
	// Saleae Logic 4 - NOT SUPPORTED
	DeviceType_DEVICE_TYPE_LOGIC_4 DeviceType = 2
	// Saleae Logic 8
	DeviceType_DEVICE_TYPE_LOGIC_8 DeviceType = 3
	// Saleae Logic 16  - NOT SUPPORTED
	DeviceType_DEVICE_TYPE_LOGIC_16 DeviceType = 4
	// Saleae Logic Pro 8
	DeviceType_DEVICE_TYPE_LOGIC_PRO_8 DeviceType = 5
	// Saleae Logic Pro 16
	DeviceType_DEVICE_TYPE_LOGIC_PRO_16 DeviceType = 6
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "DEVICE_TYPE_UNSPECIFIED",
		1: "DEVICE_TYPE_LOGIC",
		2: "DEVICE_TYPE_LOGIC_4",
		3: "DEVICE_TYPE_LOGIC_8",
		4: "DEVICE_TYPE_LOGIC_16",
		5: "DEVICE_TYPE_LOGIC_PRO_8",
		6: "DEVICE_TYPE_LOGIC_PRO_16",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_TYPE_UNSPECIFIED":  0,
		"DEVICE_TYPE_LOGIC":        1,
		"DEVICE_TYPE_LOGIC_4":      2,
		"DEVICE_TYPE_LOGIC_8":      3,
		"DEVICE_TYPE_LOGIC_16":     4,
		"DEVICE_TYPE_LOGIC_PRO_8":  5,
		"DEVICE_TYPE_LOGIC_PRO_16": 6,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_saleae_proto_enumTypes[3].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_saleae_proto_enumTypes[3]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{3}
}

type ChannelType int32

const (
	ChannelType_CHANNEL_TYPE_UNSPECIFIED ChannelType = 0
	// Digial channel
	ChannelType_CHANNEL_TYPE_DIGITAL ChannelType = 1
	// Analog channel
	ChannelType_CHANNEL_TYPE_ANALOG ChannelType = 2
)

// Enum value maps for ChannelType.
var (
	ChannelType_name = map[int32]string{
		0: "CHANNEL_TYPE_UNSPECIFIED",
		1: "CHANNEL_TYPE_DIGITAL",
		2: "CHANNEL_TYPE_ANALOG",
	}
	ChannelType_value = map[string]int32{
		"CHANNEL_TYPE_UNSPECIFIED": 0,
		"CHANNEL_TYPE_DIGITAL":     1,
		"CHANNEL_TYPE_ANALOG":      2,
	}
)

func (x ChannelType) Enum() *ChannelType {
	p := new(ChannelType)
	*p = x
	return p
}

func (x ChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_saleae_proto_enumTypes[4].Descriptor()
}

func (ChannelType) Type() protoreflect.EnumType {
	return &file_saleae_proto_enumTypes[4]
}

func (x ChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelType.Descriptor instead.
func (ChannelType) EnumDescriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{4}
}

type DigitalTriggerType int32

const (
	DigitalTriggerType_DIGITAL_TRIGGER_TYPE_UNSPECIFIED DigitalTriggerType = 0
	// Rising edge trigger, from LOW to HIGH
	DigitalTriggerType_DIGITAL_TRIGGER_TYPE_RISING DigitalTriggerType = 1
	// Falling edge trigger, from HIGH to LOW
	DigitalTriggerType_DIGITAL_TRIGGER_TYPE_FALLING DigitalTriggerType = 2
	// Pulse trigger, with a rising and falling edge
	DigitalTriggerType_DIGITAL_TRIGGER_TYPE_PULSE_HIGH DigitalTriggerType = 3
	// Pulse trigger, with a falling and rising edge
	DigitalTriggerType_DIGITAL_TRIGGER_TYPE_PULSE_LOW DigitalTriggerType = 4
)

// Enum value maps for DigitalTriggerType.
var (
	DigitalTriggerType_name = map[int32]string{
		0: "DIGITAL_TRIGGER_TYPE_UNSPECIFIED",
		1: "DIGITAL_TRIGGER_TYPE_RISING",
		2: "DIGITAL_TRIGGER_TYPE_FALLING",
		3: "DIGITAL_TRIGGER_TYPE_PULSE_HIGH",
		4: "DIGITAL_TRIGGER_TYPE_PULSE_LOW",
	}
	DigitalTriggerType_value = map[string]int32{
		"DIGITAL_TRIGGER_TYPE_UNSPECIFIED": 0,
		"DIGITAL_TRIGGER_TYPE_RISING":      1,
		"DIGITAL_TRIGGER_TYPE_FALLING":     2,
		"DIGITAL_TRIGGER_TYPE_PULSE_HIGH":  3,
		"DIGITAL_TRIGGER_TYPE_PULSE_LOW":   4,
	}
)

func (x DigitalTriggerType) Enum() *DigitalTriggerType {
	p := new(DigitalTriggerType)
	*p = x
	return p
}

func (x DigitalTriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigitalTriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_saleae_proto_enumTypes[5].Descriptor()
}

func (DigitalTriggerType) Type() protoreflect.EnumType {
	return &file_saleae_proto_enumTypes[5]
}

func (x DigitalTriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigitalTriggerType.Descriptor instead.
func (DigitalTriggerType) EnumDescriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{5}
}

type DigitalTriggerLinkedChannelState int32

const (
	DigitalTriggerLinkedChannelState_DIGITAL_TRIGGER_LINKED_CHANNEL_STATE_UNSPECIFIED DigitalTriggerLinkedChannelState = 0
	// The linked channel must be LOW
	DigitalTriggerLinkedChannelState_DIGITAL_TRIGGER_LINKED_CHANNEL_STATE_LOW DigitalTriggerLinkedChannelState = 1
	// The linked channel must be HIGH
	DigitalTriggerLinkedChannelState_DIGITAL_TRIGGER_LINKED_CHANNEL_STATE_HIGH DigitalTriggerLinkedChannelState = 2
)

// Enum value maps for DigitalTriggerLinkedChannelState.
var (
	DigitalTriggerLinkedChannelState_name = map[int32]string{
		0: "DIGITAL_TRIGGER_LINKED_CHANNEL_STATE_UNSPECIFIED",
		1: "DIGITAL_TRIGGER_LINKED_CHANNEL_STATE_LOW",
		2: "DIGITAL_TRIGGER_LINKED_CHANNEL_STATE_HIGH",
	}
	DigitalTriggerLinkedChannelState_value = map[string]int32{
		"DIGITAL_TRIGGER_LINKED_CHANNEL_STATE_UNSPECIFIED": 0,
		"DIGITAL_TRIGGER_LINKED_CHANNEL_STATE_LOW":         1,
		"DIGITAL_TRIGGER_LINKED_CHANNEL_STATE_HIGH":        2,
	}
)

func (x DigitalTriggerLinkedChannelState) Enum() *DigitalTriggerLinkedChannelState {
	p := new(DigitalTriggerLinkedChannelState)
	*p = x
	return p
}

func (x DigitalTriggerLinkedChannelState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigitalTriggerLinkedChannelState) Descriptor() protoreflect.EnumDescriptor {
	return file_saleae_proto_enumTypes[6].Descriptor()
}

func (DigitalTriggerLinkedChannelState) Type() protoreflect.EnumType {
	return &file_saleae_proto_enumTypes[6]
}

func (x DigitalTriggerLinkedChannelState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigitalTriggerLinkedChannelState.Descriptor instead.
func (DigitalTriggerLinkedChannelState) EnumDescriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{6}
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major uint32 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor uint32 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch uint32 `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{0}
}

func (x *Version) GetMajor() uint32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *Version) GetMinor() uint32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *Version) GetPatch() uint32 {
	if x != nil {
		return x.Patch
	}
	return 0
}

// Application version info for the
type AppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of .proto that Logic 2 is using.
	ApiVersion *Version `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Logic 2 Application Version
	ApplicationVersion string `protobuf:"bytes,2,opt,name=application_version,json=applicationVersion,proto3" json:"application_version,omitempty"`
	// Process ID of the main Logic 2 process
	LaunchPid uint64 `protobuf:"varint,3,opt,name=launch_pid,json=launchPid,proto3" json:"launch_pid,omitempty"`
}

func (x *AppInfo) Reset() {
	*x = AppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInfo) ProtoMessage() {}

func (x *AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInfo.ProtoReflect.Descriptor instead.
func (*AppInfo) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{1}
}

func (x *AppInfo) GetApiVersion() *Version {
	if x != nil {
		return x.ApiVersion
	}
	return nil
}

func (x *AppInfo) GetApplicationVersion() string {
	if x != nil {
		return x.ApplicationVersion
	}
	return ""
}

func (x *AppInfo) GetLaunchPid() uint64 {
	if x != nil {
		return x.LaunchPid
	}
	return 0
}

// Device descriptor object.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The device id of this device
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The type of this device
	DeviceType DeviceType `protobuf:"varint,2,opt,name=device_type,json=deviceType,proto3,enum=saleae.automation.DeviceType" json:"device_type,omitempty"`
	// True if this is a simulation device
	IsSimulation bool `protobuf:"varint,3,opt,name=is_simulation,json=isSimulation,proto3" json:"is_simulation,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{2}
}

func (x *Device) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Device) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_DEVICE_TYPE_UNSPECIFIED
}

func (x *Device) GetIsSimulation() bool {
	if x != nil {
		return x.IsSimulation
	}
	return false
}

type LogicChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indices of Digital Channels, starting from 0
	DigitalChannels []uint32 `protobuf:"varint,1,rep,packed,name=digital_channels,json=digitalChannels,proto3" json:"digital_channels,omitempty"`
	// Indices of Analog Channels, starting from 0
	AnalogChannels []uint32 `protobuf:"varint,2,rep,packed,name=analog_channels,json=analogChannels,proto3" json:"analog_channels,omitempty"`
}

func (x *LogicChannels) Reset() {
	*x = LogicChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicChannels) ProtoMessage() {}

func (x *LogicChannels) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicChannels.ProtoReflect.Descriptor instead.
func (*LogicChannels) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{3}
}

func (x *LogicChannels) GetDigitalChannels() []uint32 {
	if x != nil {
		return x.DigitalChannels
	}
	return nil
}

func (x *LogicChannels) GetAnalogChannels() []uint32 {
	if x != nil {
		return x.AnalogChannels
	}
	return nil
}

type CaptureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the capture.
	CaptureId uint64 `protobuf:"varint,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
}

func (x *CaptureInfo) Reset() {
	*x = CaptureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureInfo) ProtoMessage() {}

func (x *CaptureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureInfo.ProtoReflect.Descriptor instead.
func (*CaptureInfo) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{4}
}

func (x *CaptureInfo) GetCaptureId() uint64 {
	if x != nil {
		return x.CaptureId
	}
	return 0
}

type LogicDeviceConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Analog and Digital channels to record on
	//
	// Types that are assignable to EnabledChannels:
	//
	//	*LogicDeviceConfiguration_LogicChannels
	EnabledChannels isLogicDeviceConfiguration_EnabledChannels `protobuf_oneof:"enabled_channels"`
	// Digital Sample Rate (samples per second)
	DigitalSampleRate uint32 `protobuf:"varint,2,opt,name=digital_sample_rate,json=digitalSampleRate,proto3" json:"digital_sample_rate,omitempty"`
	// Analog Sample Rate (samples per second)
	AnalogSampleRate uint32 `protobuf:"varint,3,opt,name=analog_sample_rate,json=analogSampleRate,proto3" json:"analog_sample_rate,omitempty"`
	// For Pro 8 and Pro 16, this can be one of: 1.2, 1.8, or 3.3
	// For other devices this is ignored
	DigitalThresholdVolts float64 `protobuf:"fixed64,4,opt,name=digital_threshold_volts,json=digitalThresholdVolts,proto3" json:"digital_threshold_volts,omitempty"`
	// Glitch filter to apply to digital data
	// See https://support.saleae.com/user-guide/using-logic/software-glitch-filter for more information
	GlitchFilters []*GlitchFilterEntry `protobuf:"bytes,5,rep,name=glitch_filters,json=glitchFilters,proto3" json:"glitch_filters,omitempty"`
}

func (x *LogicDeviceConfiguration) Reset() {
	*x = LogicDeviceConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicDeviceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicDeviceConfiguration) ProtoMessage() {}

func (x *LogicDeviceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicDeviceConfiguration.ProtoReflect.Descriptor instead.
func (*LogicDeviceConfiguration) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{5}
}

func (m *LogicDeviceConfiguration) GetEnabledChannels() isLogicDeviceConfiguration_EnabledChannels {
	if m != nil {
		return m.EnabledChannels
	}
	return nil
}

func (x *LogicDeviceConfiguration) GetLogicChannels() *LogicChannels {
	if x, ok := x.GetEnabledChannels().(*LogicDeviceConfiguration_LogicChannels); ok {
		return x.LogicChannels
	}
	return nil
}

func (x *LogicDeviceConfiguration) GetDigitalSampleRate() uint32 {
	if x != nil {
		return x.DigitalSampleRate
	}
	return 0
}

func (x *LogicDeviceConfiguration) GetAnalogSampleRate() uint32 {
	if x != nil {
		return x.AnalogSampleRate
	}
	return 0
}

func (x *LogicDeviceConfiguration) GetDigitalThresholdVolts() float64 {
	if x != nil {
		return x.DigitalThresholdVolts
	}
	return 0
}

func (x *LogicDeviceConfiguration) GetGlitchFilters() []*GlitchFilterEntry {
	if x != nil {
		return x.GlitchFilters
	}
	return nil
}

type isLogicDeviceConfiguration_EnabledChannels interface {
	isLogicDeviceConfiguration_EnabledChannels()
}

type LogicDeviceConfiguration_LogicChannels struct {
	LogicChannels *LogicChannels `protobuf:"bytes,1,opt,name=logic_channels,json=logicChannels,proto3,oneof"`
}

func (*LogicDeviceConfiguration_LogicChannels) isLogicDeviceConfiguration_EnabledChannels() {}

type GlitchFilterEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Channel index
	ChannelIndex uint32 `protobuf:"varint,1,opt,name=channel_index,json=channelIndex,proto3" json:"channel_index,omitempty"`
	// Minimum pulse width, in seconds
	PulseWidthSeconds float64 `protobuf:"fixed64,2,opt,name=pulse_width_seconds,json=pulseWidthSeconds,proto3" json:"pulse_width_seconds,omitempty"`
}

func (x *GlitchFilterEntry) Reset() {
	*x = GlitchFilterEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlitchFilterEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlitchFilterEntry) ProtoMessage() {}

func (x *GlitchFilterEntry) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlitchFilterEntry.ProtoReflect.Descriptor instead.
func (*GlitchFilterEntry) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{6}
}

func (x *GlitchFilterEntry) GetChannelIndex() uint32 {
	if x != nil {
		return x.ChannelIndex
	}
	return 0
}

func (x *GlitchFilterEntry) GetPulseWidthSeconds() float64 {
	if x != nil {
		return x.PulseWidthSeconds
	}
	return 0
}

// When in manual capture mode, the capture must be manually stopped using the StopCapture request.
type ManualCaptureMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of seconds to keep after the capture ends.
	// If greater than 0, only the latest `trim_data_seconds` of the capture will be kept, otherwise the data will not be trimmed.
	TrimDataSeconds float64 `protobuf:"fixed64,1,opt,name=trim_data_seconds,json=trimDataSeconds,proto3" json:"trim_data_seconds,omitempty"`
}

func (x *ManualCaptureMode) Reset() {
	*x = ManualCaptureMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualCaptureMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualCaptureMode) ProtoMessage() {}

func (x *ManualCaptureMode) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualCaptureMode.ProtoReflect.Descriptor instead.
func (*ManualCaptureMode) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{7}
}

func (x *ManualCaptureMode) GetTrimDataSeconds() float64 {
	if x != nil {
		return x.TrimDataSeconds
	}
	return 0
}

// When in timed capture mode, the capture will automatically stop after `duration_seconds`.
// If `trim_data_seconds` is
type TimedCaptureMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Seconds of data to capture
	DurationSeconds float64 `protobuf:"fixed64,1,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	// Number of seconds to keep after the capture ends.
	// If greater than 0, only the latest `trim_data_seconds` of the capture will be kept, otherwise the data will not be trimmed.
	TrimDataSeconds float64 `protobuf:"fixed64,2,opt,name=trim_data_seconds,json=trimDataSeconds,proto3" json:"trim_data_seconds,omitempty"`
}

func (x *TimedCaptureMode) Reset() {
	*x = TimedCaptureMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimedCaptureMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimedCaptureMode) ProtoMessage() {}

func (x *TimedCaptureMode) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimedCaptureMode.ProtoReflect.Descriptor instead.
func (*TimedCaptureMode) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{8}
}

func (x *TimedCaptureMode) GetDurationSeconds() float64 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *TimedCaptureMode) GetTrimDataSeconds() float64 {
	if x != nil {
		return x.TrimDataSeconds
	}
	return 0
}

type DigitalTriggerLinkedChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Channel to link to
	ChannelIndex uint32 `protobuf:"varint,1,opt,name=channel_index,json=channelIndex,proto3" json:"channel_index,omitempty"`
	// Expected state of channel at trigger
	State DigitalTriggerLinkedChannelState `protobuf:"varint,2,opt,name=state,proto3,enum=saleae.automation.DigitalTriggerLinkedChannelState" json:"state,omitempty"`
}

func (x *DigitalTriggerLinkedChannel) Reset() {
	*x = DigitalTriggerLinkedChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalTriggerLinkedChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalTriggerLinkedChannel) ProtoMessage() {}

func (x *DigitalTriggerLinkedChannel) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalTriggerLinkedChannel.ProtoReflect.Descriptor instead.
func (*DigitalTriggerLinkedChannel) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{9}
}

func (x *DigitalTriggerLinkedChannel) GetChannelIndex() uint32 {
	if x != nil {
		return x.ChannelIndex
	}
	return 0
}

func (x *DigitalTriggerLinkedChannel) GetState() DigitalTriggerLinkedChannelState {
	if x != nil {
		return x.State
	}
	return DigitalTriggerLinkedChannelState_DIGITAL_TRIGGER_LINKED_CHANNEL_STATE_UNSPECIFIED
}

// When in digital trigger capture mode, the capture will automatically stop when the specified digital condition
// has been met.
type DigitalTriggerCaptureMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of trigger
	TriggerType DigitalTriggerType `protobuf:"varint,1,opt,name=trigger_type,json=triggerType,proto3,enum=saleae.automation.DigitalTriggerType" json:"trigger_type,omitempty"`
	// Number of seconds to continue capturing after trigger
	AfterTriggerSeconds float64 `protobuf:"fixed64,2,opt,name=after_trigger_seconds,json=afterTriggerSeconds,proto3" json:"after_trigger_seconds,omitempty"`
	// Number of seconds to keep after the capture ends.
	// If greater than 0, only the latest `trim_data_seconds` of the capture will be kept, otherwise the data will not be trimmed.
	TrimDataSeconds float64 `protobuf:"fixed64,3,opt,name=trim_data_seconds,json=trimDataSeconds,proto3" json:"trim_data_seconds,omitempty"`
	// Index of channel to search for `trigger_type`
	TriggerChannelIndex uint32 `protobuf:"varint,4,opt,name=trigger_channel_index,json=triggerChannelIndex,proto3" json:"trigger_channel_index,omitempty"`
	// Minimum pulse width to trigger on, in seconds (only applies when trigger_type is a pulse trigger type)
	MinPulseWidthSeconds float64 `protobuf:"fixed64,5,opt,name=min_pulse_width_seconds,json=minPulseWidthSeconds,proto3" json:"min_pulse_width_seconds,omitempty"`
	// Maximum pulse width to trigger on, in seconds (only applies when trigger_type is a pulse trigger type)
	MaxPulseWidthSeconds float64 `protobuf:"fixed64,6,opt,name=max_pulse_width_seconds,json=maxPulseWidthSeconds,proto3" json:"max_pulse_width_seconds,omitempty"`
	// Conditions on other digital channels that must be met in order to meet the trigger condition
	// For an edge trigger, the linked channel must be in the specified state at when the trigger edge occurs.
	// For a pulse trigger, the linked channel must be in the specified state for the duration of the pulse.
	LinkedChannels []*DigitalTriggerLinkedChannel `protobuf:"bytes,7,rep,name=linked_channels,json=linkedChannels,proto3" json:"linked_channels,omitempty"`
}

func (x *DigitalTriggerCaptureMode) Reset() {
	*x = DigitalTriggerCaptureMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DigitalTriggerCaptureMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalTriggerCaptureMode) ProtoMessage() {}

func (x *DigitalTriggerCaptureMode) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalTriggerCaptureMode.ProtoReflect.Descriptor instead.
func (*DigitalTriggerCaptureMode) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{10}
}

func (x *DigitalTriggerCaptureMode) GetTriggerType() DigitalTriggerType {
	if x != nil {
		return x.TriggerType
	}
	return DigitalTriggerType_DIGITAL_TRIGGER_TYPE_UNSPECIFIED
}

func (x *DigitalTriggerCaptureMode) GetAfterTriggerSeconds() float64 {
	if x != nil {
		return x.AfterTriggerSeconds
	}
	return 0
}

func (x *DigitalTriggerCaptureMode) GetTrimDataSeconds() float64 {
	if x != nil {
		return x.TrimDataSeconds
	}
	return 0
}

func (x *DigitalTriggerCaptureMode) GetTriggerChannelIndex() uint32 {
	if x != nil {
		return x.TriggerChannelIndex
	}
	return 0
}

func (x *DigitalTriggerCaptureMode) GetMinPulseWidthSeconds() float64 {
	if x != nil {
		return x.MinPulseWidthSeconds
	}
	return 0
}

func (x *DigitalTriggerCaptureMode) GetMaxPulseWidthSeconds() float64 {
	if x != nil {
		return x.MaxPulseWidthSeconds
	}
	return 0
}

func (x *DigitalTriggerCaptureMode) GetLinkedChannels() []*DigitalTriggerLinkedChannel {
	if x != nil {
		return x.LinkedChannels
	}
	return nil
}

type CaptureConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Capture buffer size
	// This is the maximum number of megabytes allowed for storing data during a capture.
	// When this limit is reached, what happens depends on the capture mode:
	//
	//	Manual - the oldest data will be deleted until the total usage is under buffer_size_megabytes
	//	Timer - the capture will be terminated
	//	DigitalTriggerCapture - the capture will be terminated
	BufferSizeMegabytes uint32 `protobuf:"varint,1,opt,name=buffer_size_megabytes,json=bufferSizeMegabytes,proto3" json:"buffer_size_megabytes,omitempty"`
	// Capture mode
	//
	// Types that are assignable to CaptureMode:
	//
	//	*CaptureConfiguration_ManualCaptureMode
	//	*CaptureConfiguration_TimedCaptureMode
	//	*CaptureConfiguration_DigitalCaptureMode
	CaptureMode isCaptureConfiguration_CaptureMode `protobuf_oneof:"capture_mode"`
}

func (x *CaptureConfiguration) Reset() {
	*x = CaptureConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureConfiguration) ProtoMessage() {}

func (x *CaptureConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureConfiguration.ProtoReflect.Descriptor instead.
func (*CaptureConfiguration) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{11}
}

func (x *CaptureConfiguration) GetBufferSizeMegabytes() uint32 {
	if x != nil {
		return x.BufferSizeMegabytes
	}
	return 0
}

func (m *CaptureConfiguration) GetCaptureMode() isCaptureConfiguration_CaptureMode {
	if m != nil {
		return m.CaptureMode
	}
	return nil
}

func (x *CaptureConfiguration) GetManualCaptureMode() *ManualCaptureMode {
	if x, ok := x.GetCaptureMode().(*CaptureConfiguration_ManualCaptureMode); ok {
		return x.ManualCaptureMode
	}
	return nil
}

func (x *CaptureConfiguration) GetTimedCaptureMode() *TimedCaptureMode {
	if x, ok := x.GetCaptureMode().(*CaptureConfiguration_TimedCaptureMode); ok {
		return x.TimedCaptureMode
	}
	return nil
}

func (x *CaptureConfiguration) GetDigitalCaptureMode() *DigitalTriggerCaptureMode {
	if x, ok := x.GetCaptureMode().(*CaptureConfiguration_DigitalCaptureMode); ok {
		return x.DigitalCaptureMode
	}
	return nil
}

type isCaptureConfiguration_CaptureMode interface {
	isCaptureConfiguration_CaptureMode()
}

type CaptureConfiguration_ManualCaptureMode struct {
	ManualCaptureMode *ManualCaptureMode `protobuf:"bytes,2,opt,name=manual_capture_mode,json=manualCaptureMode,proto3,oneof"`
}

type CaptureConfiguration_TimedCaptureMode struct {
	TimedCaptureMode *TimedCaptureMode `protobuf:"bytes,3,opt,name=timed_capture_mode,json=timedCaptureMode,proto3,oneof"`
}

type CaptureConfiguration_DigitalCaptureMode struct {
	DigitalCaptureMode *DigitalTriggerCaptureMode `protobuf:"bytes,4,opt,name=digital_capture_mode,json=digitalCaptureMode,proto3,oneof"`
}

func (*CaptureConfiguration_ManualCaptureMode) isCaptureConfiguration_CaptureMode() {}

func (*CaptureConfiguration_TimedCaptureMode) isCaptureConfiguration_CaptureMode() {}

func (*CaptureConfiguration_DigitalCaptureMode) isCaptureConfiguration_CaptureMode() {}

type GetDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, simulation devices will be included in the response
	IncludeSimulationDevices bool `protobuf:"varint,1,opt,name=include_simulation_devices,json=includeSimulationDevices,proto3" json:"include_simulation_devices,omitempty"`
}

func (x *GetDevicesRequest) Reset() {
	*x = GetDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicesRequest) ProtoMessage() {}

func (x *GetDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicesRequest.ProtoReflect.Descriptor instead.
func (*GetDevicesRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{12}
}

func (x *GetDevicesRequest) GetIncludeSimulationDevices() bool {
	if x != nil {
		return x.IncludeSimulationDevices
	}
	return false
}

type GetDevicesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *GetDevicesReply) Reset() {
	*x = GetDevicesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevicesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicesReply) ProtoMessage() {}

func (x *GetDevicesReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicesReply.ProtoReflect.Descriptor instead.
func (*GetDevicesReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{13}
}

func (x *GetDevicesReply) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

// Start Capture
type StartCaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device id of device to capture with.
	// If a device id is not specified, the first physical device will be used.
	// If no physical device is connected, an error will be returned.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Types that are assignable to DeviceConfiguration:
	//
	//	*StartCaptureRequest_LogicDeviceConfiguration
	DeviceConfiguration  isStartCaptureRequest_DeviceConfiguration `protobuf_oneof:"device_configuration"`
	CaptureConfiguration *CaptureConfiguration                     `protobuf:"bytes,3,opt,name=capture_configuration,json=captureConfiguration,proto3" json:"capture_configuration,omitempty"`
}

func (x *StartCaptureRequest) Reset() {
	*x = StartCaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartCaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartCaptureRequest) ProtoMessage() {}

func (x *StartCaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartCaptureRequest.ProtoReflect.Descriptor instead.
func (*StartCaptureRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{14}
}

func (x *StartCaptureRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (m *StartCaptureRequest) GetDeviceConfiguration() isStartCaptureRequest_DeviceConfiguration {
	if m != nil {
		return m.DeviceConfiguration
	}
	return nil
}

func (x *StartCaptureRequest) GetLogicDeviceConfiguration() *LogicDeviceConfiguration {
	if x, ok := x.GetDeviceConfiguration().(*StartCaptureRequest_LogicDeviceConfiguration); ok {
		return x.LogicDeviceConfiguration
	}
	return nil
}

func (x *StartCaptureRequest) GetCaptureConfiguration() *CaptureConfiguration {
	if x != nil {
		return x.CaptureConfiguration
	}
	return nil
}

type isStartCaptureRequest_DeviceConfiguration interface {
	isStartCaptureRequest_DeviceConfiguration()
}

type StartCaptureRequest_LogicDeviceConfiguration struct {
	LogicDeviceConfiguration *LogicDeviceConfiguration `protobuf:"bytes,2,opt,name=logic_device_configuration,json=logicDeviceConfiguration,proto3,oneof"`
}

func (*StartCaptureRequest_LogicDeviceConfiguration) isStartCaptureRequest_DeviceConfiguration() {}

type StartCaptureReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptureInfo *CaptureInfo `protobuf:"bytes,1,opt,name=capture_info,json=captureInfo,proto3" json:"capture_info,omitempty"`
}

func (x *StartCaptureReply) Reset() {
	*x = StartCaptureReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartCaptureReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartCaptureReply) ProtoMessage() {}

func (x *StartCaptureReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartCaptureReply.ProtoReflect.Descriptor instead.
func (*StartCaptureReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{15}
}

func (x *StartCaptureReply) GetCaptureInfo() *CaptureInfo {
	if x != nil {
		return x.CaptureInfo
	}
	return nil
}

// Stop Capture
// If the capture is running, this will stop the capture, otherwise it will do nothing.
type StopCaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptureId uint64 `protobuf:"varint,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
}

func (x *StopCaptureRequest) Reset() {
	*x = StopCaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCaptureRequest) ProtoMessage() {}

func (x *StopCaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCaptureRequest.ProtoReflect.Descriptor instead.
func (*StopCaptureRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{16}
}

func (x *StopCaptureRequest) GetCaptureId() uint64 {
	if x != nil {
		return x.CaptureId
	}
	return 0
}

type StopCaptureReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopCaptureReply) Reset() {
	*x = StopCaptureReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCaptureReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCaptureReply) ProtoMessage() {}

func (x *StopCaptureReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCaptureReply.ProtoReflect.Descriptor instead.
func (*StopCaptureReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{17}
}

// Wait Capture
// If the capture is running, this will wait for the capture to end, otherwise it will do nothing.
// This should not be used with ManualCaptureMode. It requires that the capture ends on its own.
type WaitCaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptureId uint64 `protobuf:"varint,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
}

func (x *WaitCaptureRequest) Reset() {
	*x = WaitCaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitCaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitCaptureRequest) ProtoMessage() {}

func (x *WaitCaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitCaptureRequest.ProtoReflect.Descriptor instead.
func (*WaitCaptureRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{18}
}

func (x *WaitCaptureRequest) GetCaptureId() uint64 {
	if x != nil {
		return x.CaptureId
	}
	return 0
}

type WaitCaptureReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitCaptureReply) Reset() {
	*x = WaitCaptureReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitCaptureReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitCaptureReply) ProtoMessage() {}

func (x *WaitCaptureReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitCaptureReply.ProtoReflect.Descriptor instead.
func (*WaitCaptureReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{19}
}

type LoadCaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Absolute filepath of Logic 2 .sal capture file to load.
	Filepath string `protobuf:"bytes,1,opt,name=filepath,proto3" json:"filepath,omitempty"`
}

func (x *LoadCaptureRequest) Reset() {
	*x = LoadCaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCaptureRequest) ProtoMessage() {}

func (x *LoadCaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCaptureRequest.ProtoReflect.Descriptor instead.
func (*LoadCaptureRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{20}
}

func (x *LoadCaptureRequest) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

type LoadCaptureReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about the capture that was loaded.
	CaptureInfo *CaptureInfo `protobuf:"bytes,1,opt,name=capture_info,json=captureInfo,proto3" json:"capture_info,omitempty"`
}

func (x *LoadCaptureReply) Reset() {
	*x = LoadCaptureReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCaptureReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCaptureReply) ProtoMessage() {}

func (x *LoadCaptureReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCaptureReply.ProtoReflect.Descriptor instead.
func (*LoadCaptureReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{21}
}

func (x *LoadCaptureReply) GetCaptureInfo() *CaptureInfo {
	if x != nil {
		return x.CaptureInfo
	}
	return nil
}

type SaveCaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of capture to save.
	CaptureId uint64 `protobuf:"varint,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
	// Absolute filepath to save the file to, usually ending in ".sal".
	// The save file will be exactly as specified, and will _NOT_ have ".sal" appended to it.
	Filepath string `protobuf:"bytes,2,opt,name=filepath,proto3" json:"filepath,omitempty"`
}

func (x *SaveCaptureRequest) Reset() {
	*x = SaveCaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveCaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveCaptureRequest) ProtoMessage() {}

func (x *SaveCaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveCaptureRequest.ProtoReflect.Descriptor instead.
func (*SaveCaptureRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{22}
}

func (x *SaveCaptureRequest) GetCaptureId() uint64 {
	if x != nil {
		return x.CaptureId
	}
	return 0
}

func (x *SaveCaptureRequest) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

type SaveCaptureReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveCaptureReply) Reset() {
	*x = SaveCaptureReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveCaptureReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveCaptureReply) ProtoMessage() {}

func (x *SaveCaptureReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveCaptureReply.ProtoReflect.Descriptor instead.
func (*SaveCaptureReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{23}
}

type CloseCaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of capture to close.
	CaptureId uint64 `protobuf:"varint,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
}

func (x *CloseCaptureRequest) Reset() {
	*x = CloseCaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseCaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseCaptureRequest) ProtoMessage() {}

func (x *CloseCaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseCaptureRequest.ProtoReflect.Descriptor instead.
func (*CloseCaptureRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{24}
}

func (x *CloseCaptureRequest) GetCaptureId() uint64 {
	if x != nil {
		return x.CaptureId
	}
	return 0
}

type CloseCaptureReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseCaptureReply) Reset() {
	*x = CloseCaptureReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseCaptureReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseCaptureReply) ProtoMessage() {}

func (x *CloseCaptureReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseCaptureReply.ProtoReflect.Descriptor instead.
func (*CloseCaptureReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{25}
}

type ExportRawDataCsvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of capture to export data from.
	CaptureId uint64 `protobuf:"varint,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
	// Directory to create exported CSV files in.
	Directory string `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	// Channels to export.
	//
	// Types that are assignable to Channels:
	//
	//	*ExportRawDataCsvRequest_LogicChannels
	Channels isExportRawDataCsvRequest_Channels `protobuf_oneof:"channels"`
	// Must be between 1 and 1,000,000, inclusive.
	AnalogDownsampleRatio uint64 `protobuf:"varint,4,opt,name=analog_downsample_ratio,json=analogDownsampleRatio,proto3" json:"analog_downsample_ratio,omitempty"`
	// If true, timestamps will be in ISO8601 format.
	Iso8601Timestamp bool `protobuf:"varint,5,opt,name=iso8601_timestamp,json=iso8601Timestamp,proto3" json:"iso8601_timestamp,omitempty"`
}

func (x *ExportRawDataCsvRequest) Reset() {
	*x = ExportRawDataCsvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportRawDataCsvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportRawDataCsvRequest) ProtoMessage() {}

func (x *ExportRawDataCsvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportRawDataCsvRequest.ProtoReflect.Descriptor instead.
func (*ExportRawDataCsvRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{26}
}

func (x *ExportRawDataCsvRequest) GetCaptureId() uint64 {
	if x != nil {
		return x.CaptureId
	}
	return 0
}

func (x *ExportRawDataCsvRequest) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (m *ExportRawDataCsvRequest) GetChannels() isExportRawDataCsvRequest_Channels {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (x *ExportRawDataCsvRequest) GetLogicChannels() *LogicChannels {
	if x, ok := x.GetChannels().(*ExportRawDataCsvRequest_LogicChannels); ok {
		return x.LogicChannels
	}
	return nil
}

func (x *ExportRawDataCsvRequest) GetAnalogDownsampleRatio() uint64 {
	if x != nil {
		return x.AnalogDownsampleRatio
	}
	return 0
}

func (x *ExportRawDataCsvRequest) GetIso8601Timestamp() bool {
	if x != nil {
		return x.Iso8601Timestamp
	}
	return false
}

type isExportRawDataCsvRequest_Channels interface {
	isExportRawDataCsvRequest_Channels()
}

type ExportRawDataCsvRequest_LogicChannels struct {
	LogicChannels *LogicChannels `protobuf:"bytes,3,opt,name=logic_channels,json=logicChannels,proto3,oneof"`
}

func (*ExportRawDataCsvRequest_LogicChannels) isExportRawDataCsvRequest_Channels() {}

type ExportRawDataCsvReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExportRawDataCsvReply) Reset() {
	*x = ExportRawDataCsvReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportRawDataCsvReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportRawDataCsvReply) ProtoMessage() {}

func (x *ExportRawDataCsvReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportRawDataCsvReply.ProtoReflect.Descriptor instead.
func (*ExportRawDataCsvReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{27}
}

type ExportRawDataBinaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of capture to export data from.
	CaptureId uint64 `protobuf:"varint,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
	// Directory to create exported binary files in.
	Directory string `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	// Channels to export.
	//
	// Types that are assignable to Channels:
	//
	//	*ExportRawDataBinaryRequest_LogicChannels
	Channels isExportRawDataBinaryRequest_Channels `protobuf_oneof:"channels"`
	// Must be between 1 and 1,000,000, inclusive.
	AnalogDownsampleRatio uint64 `protobuf:"varint,4,opt,name=analog_downsample_ratio,json=analogDownsampleRatio,proto3" json:"analog_downsample_ratio,omitempty"`
}

func (x *ExportRawDataBinaryRequest) Reset() {
	*x = ExportRawDataBinaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportRawDataBinaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportRawDataBinaryRequest) ProtoMessage() {}

func (x *ExportRawDataBinaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportRawDataBinaryRequest.ProtoReflect.Descriptor instead.
func (*ExportRawDataBinaryRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{28}
}

func (x *ExportRawDataBinaryRequest) GetCaptureId() uint64 {
	if x != nil {
		return x.CaptureId
	}
	return 0
}

func (x *ExportRawDataBinaryRequest) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (m *ExportRawDataBinaryRequest) GetChannels() isExportRawDataBinaryRequest_Channels {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (x *ExportRawDataBinaryRequest) GetLogicChannels() *LogicChannels {
	if x, ok := x.GetChannels().(*ExportRawDataBinaryRequest_LogicChannels); ok {
		return x.LogicChannels
	}
	return nil
}

func (x *ExportRawDataBinaryRequest) GetAnalogDownsampleRatio() uint64 {
	if x != nil {
		return x.AnalogDownsampleRatio
	}
	return 0
}

type isExportRawDataBinaryRequest_Channels interface {
	isExportRawDataBinaryRequest_Channels()
}

type ExportRawDataBinaryRequest_LogicChannels struct {
	LogicChannels *LogicChannels `protobuf:"bytes,3,opt,name=logic_channels,json=logicChannels,proto3,oneof"`
}

func (*ExportRawDataBinaryRequest_LogicChannels) isExportRawDataBinaryRequest_Channels() {}

type ExportRawDataBinaryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExportRawDataBinaryReply) Reset() {
	*x = ExportRawDataBinaryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportRawDataBinaryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportRawDataBinaryReply) ProtoMessage() {}

func (x *ExportRawDataBinaryReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportRawDataBinaryReply.ProtoReflect.Descriptor instead.
func (*ExportRawDataBinaryReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{29}
}

type AnalyzerSettingValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*AnalyzerSettingValue_StringValue
	//	*AnalyzerSettingValue_Int64Value
	//	*AnalyzerSettingValue_BoolValue
	//	*AnalyzerSettingValue_DoubleValue
	Value isAnalyzerSettingValue_Value `protobuf_oneof:"value"`
}

func (x *AnalyzerSettingValue) Reset() {
	*x = AnalyzerSettingValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzerSettingValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzerSettingValue) ProtoMessage() {}

func (x *AnalyzerSettingValue) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzerSettingValue.ProtoReflect.Descriptor instead.
func (*AnalyzerSettingValue) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{30}
}

func (m *AnalyzerSettingValue) GetValue() isAnalyzerSettingValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AnalyzerSettingValue) GetStringValue() string {
	if x, ok := x.GetValue().(*AnalyzerSettingValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *AnalyzerSettingValue) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*AnalyzerSettingValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *AnalyzerSettingValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*AnalyzerSettingValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *AnalyzerSettingValue) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*AnalyzerSettingValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

type isAnalyzerSettingValue_Value interface {
	isAnalyzerSettingValue_Value()
}

type AnalyzerSettingValue_StringValue struct {
	// String value
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type AnalyzerSettingValue_Int64Value struct {
	// Integer value
	Int64Value int64 `protobuf:"varint,2,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type AnalyzerSettingValue_BoolValue struct {
	// Boolean value
	BoolValue bool `protobuf:"varint,3,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type AnalyzerSettingValue_DoubleValue struct {
	// Double floating-point value
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

func (*AnalyzerSettingValue_StringValue) isAnalyzerSettingValue_Value() {}

func (*AnalyzerSettingValue_Int64Value) isAnalyzerSettingValue_Value() {}

func (*AnalyzerSettingValue_BoolValue) isAnalyzerSettingValue_Value() {}

func (*AnalyzerSettingValue_DoubleValue) isAnalyzerSettingValue_Value() {}

type AddAnalyzerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of capture to add analyzer to.
	CaptureId uint64 `protobuf:"varint,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
	// Name of analyzer. This should exactly match the name seen in the
	// application. Examples: "SPI", "I2C", "Async Serial"
	AnalyzerName string `protobuf:"bytes,2,opt,name=analyzer_name,json=analyzerName,proto3" json:"analyzer_name,omitempty"`
	// User-facing name for the analyzer.
	AnalyzerLabel string `protobuf:"bytes,3,opt,name=analyzer_label,json=analyzerLabel,proto3" json:"analyzer_label,omitempty"`
	// Analyzer settings. These should match the names shown in analyzer's
	// settings shown in the application.
	Settings map[string]*AnalyzerSettingValue `protobuf:"bytes,4,rep,name=settings,proto3" json:"settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddAnalyzerRequest) Reset() {
	*x = AddAnalyzerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAnalyzerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAnalyzerRequest) ProtoMessage() {}

func (x *AddAnalyzerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAnalyzerRequest.ProtoReflect.Descriptor instead.
func (*AddAnalyzerRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{31}
}

func (x *AddAnalyzerRequest) GetCaptureId() uint64 {
	if x != nil {
		return x.CaptureId
	}
	return 0
}

func (x *AddAnalyzerRequest) GetAnalyzerName() string {
	if x != nil {
		return x.AnalyzerName
	}
	return ""
}

func (x *AddAnalyzerRequest) GetAnalyzerLabel() string {
	if x != nil {
		return x.AnalyzerLabel
	}
	return ""
}

func (x *AddAnalyzerRequest) GetSettings() map[string]*AnalyzerSettingValue {
	if x != nil {
		return x.Settings
	}
	return nil
}

type AddAnalyzerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the newly created analyzer.
	AnalyzerId uint64 `protobuf:"varint,1,opt,name=analyzer_id,json=analyzerId,proto3" json:"analyzer_id,omitempty"`
}

func (x *AddAnalyzerReply) Reset() {
	*x = AddAnalyzerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAnalyzerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAnalyzerReply) ProtoMessage() {}

func (x *AddAnalyzerReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAnalyzerReply.ProtoReflect.Descriptor instead.
func (*AddAnalyzerReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{32}
}

func (x *AddAnalyzerReply) GetAnalyzerId() uint64 {
	if x != nil {
		return x.AnalyzerId
	}
	return 0
}

type RemoveAnalyzerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of capture to remove analyzer from.
	CaptureId uint64 `protobuf:"varint,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
	// Id of analyzer to remove.
	AnalyzerId uint64 `protobuf:"varint,2,opt,name=analyzer_id,json=analyzerId,proto3" json:"analyzer_id,omitempty"`
}

func (x *RemoveAnalyzerRequest) Reset() {
	*x = RemoveAnalyzerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAnalyzerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAnalyzerRequest) ProtoMessage() {}

func (x *RemoveAnalyzerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAnalyzerRequest.ProtoReflect.Descriptor instead.
func (*RemoveAnalyzerRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{33}
}

func (x *RemoveAnalyzerRequest) GetCaptureId() uint64 {
	if x != nil {
		return x.CaptureId
	}
	return 0
}

func (x *RemoveAnalyzerRequest) GetAnalyzerId() uint64 {
	if x != nil {
		return x.AnalyzerId
	}
	return 0
}

type RemoveAnalyzerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveAnalyzerReply) Reset() {
	*x = RemoveAnalyzerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAnalyzerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAnalyzerReply) ProtoMessage() {}

func (x *RemoveAnalyzerReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAnalyzerReply.ProtoReflect.Descriptor instead.
func (*RemoveAnalyzerReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{34}
}

type HighLevelAnalyzerSettingValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*HighLevelAnalyzerSettingValue_StringValue
	//	*HighLevelAnalyzerSettingValue_NumberValue
	Value isHighLevelAnalyzerSettingValue_Value `protobuf_oneof:"value"`
}

func (x *HighLevelAnalyzerSettingValue) Reset() {
	*x = HighLevelAnalyzerSettingValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighLevelAnalyzerSettingValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighLevelAnalyzerSettingValue) ProtoMessage() {}

func (x *HighLevelAnalyzerSettingValue) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighLevelAnalyzerSettingValue.ProtoReflect.Descriptor instead.
func (*HighLevelAnalyzerSettingValue) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{35}
}

func (m *HighLevelAnalyzerSettingValue) GetValue() isHighLevelAnalyzerSettingValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *HighLevelAnalyzerSettingValue) GetStringValue() string {
	if x, ok := x.GetValue().(*HighLevelAnalyzerSettingValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *HighLevelAnalyzerSettingValue) GetNumberValue() float64 {
	if x, ok := x.GetValue().(*HighLevelAnalyzerSettingValue_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

type isHighLevelAnalyzerSettingValue_Value interface {
	isHighLevelAnalyzerSettingValue_Value()
}

type HighLevelAnalyzerSettingValue_StringValue struct {
	// String value
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type HighLevelAnalyzerSettingValue_NumberValue struct {
	// Double-precision floating point value
	NumberValue float64 `protobuf:"fixed64,2,opt,name=number_value,json=numberValue,proto3,oneof"`
}

func (*HighLevelAnalyzerSettingValue_StringValue) isHighLevelAnalyzerSettingValue_Value() {}

func (*HighLevelAnalyzerSettingValue_NumberValue) isHighLevelAnalyzerSettingValue_Value() {}

type AddHighLevelAnalyzerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of capture to add analyzer to.
	CaptureId uint64 `protobuf:"varint,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
	// The path to the extension directory containing the HLA
	// Note: The extension directory is the directory that contains `extension.json`
	ExtensionDirectory string `protobuf:"bytes,2,opt,name=extension_directory,json=extensionDirectory,proto3" json:"extension_directory,omitempty"`
	// The name of the HLA to use, as listed in `extension.json`
	HlaName string `protobuf:"bytes,3,opt,name=hla_name,json=hlaName,proto3" json:"hla_name,omitempty"`
	// User-facing name for the HLA.
	HlaLabel string `protobuf:"bytes,4,opt,name=hla_label,json=hlaLabel,proto3" json:"hla_label,omitempty"`
	// Id of analyzer to use as input to this HLA
	InputAnalyzerId uint64 `protobuf:"varint,5,opt,name=input_analyzer_id,json=inputAnalyzerId,proto3" json:"input_analyzer_id,omitempty"`
	// Analyzer settings. These should match the names shown in analyzer's
	// settings shown in the application.
	Settings map[string]*HighLevelAnalyzerSettingValue `protobuf:"bytes,6,rep,name=settings,proto3" json:"settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddHighLevelAnalyzerRequest) Reset() {
	*x = AddHighLevelAnalyzerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHighLevelAnalyzerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHighLevelAnalyzerRequest) ProtoMessage() {}

func (x *AddHighLevelAnalyzerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHighLevelAnalyzerRequest.ProtoReflect.Descriptor instead.
func (*AddHighLevelAnalyzerRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{36}
}

func (x *AddHighLevelAnalyzerRequest) GetCaptureId() uint64 {
	if x != nil {
		return x.CaptureId
	}
	return 0
}

func (x *AddHighLevelAnalyzerRequest) GetExtensionDirectory() string {
	if x != nil {
		return x.ExtensionDirectory
	}
	return ""
}

func (x *AddHighLevelAnalyzerRequest) GetHlaName() string {
	if x != nil {
		return x.HlaName
	}
	return ""
}

func (x *AddHighLevelAnalyzerRequest) GetHlaLabel() string {
	if x != nil {
		return x.HlaLabel
	}
	return ""
}

func (x *AddHighLevelAnalyzerRequest) GetInputAnalyzerId() uint64 {
	if x != nil {
		return x.InputAnalyzerId
	}
	return 0
}

func (x *AddHighLevelAnalyzerRequest) GetSettings() map[string]*HighLevelAnalyzerSettingValue {
	if x != nil {
		return x.Settings
	}
	return nil
}

type AddHighLevelAnalyzerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the newly created analyzer.
	AnalyzerId uint64 `protobuf:"varint,1,opt,name=analyzer_id,json=analyzerId,proto3" json:"analyzer_id,omitempty"`
}

func (x *AddHighLevelAnalyzerReply) Reset() {
	*x = AddHighLevelAnalyzerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHighLevelAnalyzerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHighLevelAnalyzerReply) ProtoMessage() {}

func (x *AddHighLevelAnalyzerReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHighLevelAnalyzerReply.ProtoReflect.Descriptor instead.
func (*AddHighLevelAnalyzerReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{37}
}

func (x *AddHighLevelAnalyzerReply) GetAnalyzerId() uint64 {
	if x != nil {
		return x.AnalyzerId
	}
	return 0
}

type RemoveHighLevelAnalyzerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of capture to remove analyzer from.
	CaptureId uint64 `protobuf:"varint,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
	// Id of high level analyzer to remove.
	AnalyzerId uint64 `protobuf:"varint,2,opt,name=analyzer_id,json=analyzerId,proto3" json:"analyzer_id,omitempty"`
}

func (x *RemoveHighLevelAnalyzerRequest) Reset() {
	*x = RemoveHighLevelAnalyzerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHighLevelAnalyzerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHighLevelAnalyzerRequest) ProtoMessage() {}

func (x *RemoveHighLevelAnalyzerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHighLevelAnalyzerRequest.ProtoReflect.Descriptor instead.
func (*RemoveHighLevelAnalyzerRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{38}
}

func (x *RemoveHighLevelAnalyzerRequest) GetCaptureId() uint64 {
	if x != nil {
		return x.CaptureId
	}
	return 0
}

func (x *RemoveHighLevelAnalyzerRequest) GetAnalyzerId() uint64 {
	if x != nil {
		return x.AnalyzerId
	}
	return 0
}

type RemoveHighLevelAnalyzerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveHighLevelAnalyzerReply) Reset() {
	*x = RemoveHighLevelAnalyzerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHighLevelAnalyzerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHighLevelAnalyzerReply) ProtoMessage() {}

func (x *RemoveHighLevelAnalyzerReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHighLevelAnalyzerReply.ProtoReflect.Descriptor instead.
func (*RemoveHighLevelAnalyzerReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{39}
}

type DataTableAnalyzerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of analyzers to export data from.
	AnalyzerId uint64 `protobuf:"varint,1,opt,name=analyzer_id,json=analyzerId,proto3" json:"analyzer_id,omitempty"`
	// Radix type to use for this analyzer
	RadixType RadixType `protobuf:"varint,2,opt,name=radix_type,json=radixType,proto3,enum=saleae.automation.RadixType" json:"radix_type,omitempty"`
}

func (x *DataTableAnalyzerConfiguration) Reset() {
	*x = DataTableAnalyzerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTableAnalyzerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTableAnalyzerConfiguration) ProtoMessage() {}

func (x *DataTableAnalyzerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTableAnalyzerConfiguration.ProtoReflect.Descriptor instead.
func (*DataTableAnalyzerConfiguration) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{40}
}

func (x *DataTableAnalyzerConfiguration) GetAnalyzerId() uint64 {
	if x != nil {
		return x.AnalyzerId
	}
	return 0
}

func (x *DataTableAnalyzerConfiguration) GetRadixType() RadixType {
	if x != nil {
		return x.RadixType
	}
	return RadixType_RADIX_TYPE_UNSPECIFIED
}

type DataTableFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query to filter by
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Columns to query
	Columns []string `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *DataTableFilter) Reset() {
	*x = DataTableFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTableFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTableFilter) ProtoMessage() {}

func (x *DataTableFilter) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTableFilter.ProtoReflect.Descriptor instead.
func (*DataTableFilter) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{41}
}

func (x *DataTableFilter) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *DataTableFilter) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

type ExportDataTableCsvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of capture to export data from.
	CaptureId uint64 `protobuf:"varint,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
	// Path to export CSV data to.
	Filepath string `protobuf:"bytes,2,opt,name=filepath,proto3" json:"filepath,omitempty"`
	// Id of analyzers to export data from.
	Analyzers []*DataTableAnalyzerConfiguration `protobuf:"bytes,3,rep,name=analyzers,proto3" json:"analyzers,omitempty"`
	// If true, timestamps will be in ISO8601 format.
	Iso8601Timestamp bool `protobuf:"varint,4,opt,name=iso8601_timestamp,json=iso8601Timestamp,proto3" json:"iso8601_timestamp,omitempty"`
	// Columns to export. If empty, all columns will be exported.
	ExportColumns []string         `protobuf:"bytes,5,rep,name=export_columns,json=exportColumns,proto3" json:"export_columns,omitempty"`
	Filter        *DataTableFilter `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ExportDataTableCsvRequest) Reset() {
	*x = ExportDataTableCsvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportDataTableCsvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportDataTableCsvRequest) ProtoMessage() {}

func (x *ExportDataTableCsvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportDataTableCsvRequest.ProtoReflect.Descriptor instead.
func (*ExportDataTableCsvRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{42}
}

func (x *ExportDataTableCsvRequest) GetCaptureId() uint64 {
	if x != nil {
		return x.CaptureId
	}
	return 0
}

func (x *ExportDataTableCsvRequest) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

func (x *ExportDataTableCsvRequest) GetAnalyzers() []*DataTableAnalyzerConfiguration {
	if x != nil {
		return x.Analyzers
	}
	return nil
}

func (x *ExportDataTableCsvRequest) GetIso8601Timestamp() bool {
	if x != nil {
		return x.Iso8601Timestamp
	}
	return false
}

func (x *ExportDataTableCsvRequest) GetExportColumns() []string {
	if x != nil {
		return x.ExportColumns
	}
	return nil
}

func (x *ExportDataTableCsvRequest) GetFilter() *DataTableFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ExportDataTableCsvReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExportDataTableCsvReply) Reset() {
	*x = ExportDataTableCsvReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportDataTableCsvReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportDataTableCsvReply) ProtoMessage() {}

func (x *ExportDataTableCsvReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportDataTableCsvReply.ProtoReflect.Descriptor instead.
func (*ExportDataTableCsvReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{43}
}

type LegacyExportAnalyzerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of capture to export data from.
	CaptureId uint64 `protobuf:"varint,1,opt,name=capture_id,json=captureId,proto3" json:"capture_id,omitempty"`
	// Path to export data to.
	Filepath string `protobuf:"bytes,2,opt,name=filepath,proto3" json:"filepath,omitempty"`
	// Id of analyzer to export data from.
	AnalyzerId uint64 `protobuf:"varint,3,opt,name=analyzer_id,json=analyzerId,proto3" json:"analyzer_id,omitempty"`
	// Radix to use for exported data.
	RadixType RadixType `protobuf:"varint,4,opt,name=radix_type,json=radixType,proto3,enum=saleae.automation.RadixType" json:"radix_type,omitempty"`
}

func (x *LegacyExportAnalyzerRequest) Reset() {
	*x = LegacyExportAnalyzerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegacyExportAnalyzerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyExportAnalyzerRequest) ProtoMessage() {}

func (x *LegacyExportAnalyzerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyExportAnalyzerRequest.ProtoReflect.Descriptor instead.
func (*LegacyExportAnalyzerRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{44}
}

func (x *LegacyExportAnalyzerRequest) GetCaptureId() uint64 {
	if x != nil {
		return x.CaptureId
	}
	return 0
}

func (x *LegacyExportAnalyzerRequest) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

func (x *LegacyExportAnalyzerRequest) GetAnalyzerId() uint64 {
	if x != nil {
		return x.AnalyzerId
	}
	return 0
}

func (x *LegacyExportAnalyzerRequest) GetRadixType() RadixType {
	if x != nil {
		return x.RadixType
	}
	return RadixType_RADIX_TYPE_UNSPECIFIED
}

type LegacyExportAnalyzerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LegacyExportAnalyzerReply) Reset() {
	*x = LegacyExportAnalyzerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegacyExportAnalyzerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyExportAnalyzerReply) ProtoMessage() {}

func (x *LegacyExportAnalyzerReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyExportAnalyzerReply.ProtoReflect.Descriptor instead.
func (*LegacyExportAnalyzerReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{45}
}

type GetAppInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAppInfoRequest) Reset() {
	*x = GetAppInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppInfoRequest) ProtoMessage() {}

func (x *GetAppInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAppInfoRequest) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{46}
}

type GetAppInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppInfo *AppInfo `protobuf:"bytes,1,opt,name=app_info,json=appInfo,proto3" json:"app_info,omitempty"`
}

func (x *GetAppInfoReply) Reset() {
	*x = GetAppInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saleae_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppInfoReply) ProtoMessage() {}

func (x *GetAppInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_saleae_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppInfoReply.ProtoReflect.Descriptor instead.
func (*GetAppInfoReply) Descriptor() ([]byte, []int) {
	return file_saleae_proto_rawDescGZIP(), []int{47}
}

func (x *GetAppInfoReply) GetAppInfo() *AppInfo {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

var File_saleae_proto protoreflect.FileDescriptor

var file_saleae_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x4b, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0x96,
	0x01, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x70,
	0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x50, 0x69, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x2c, 0x0a, 0x0b, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0xdc, 0x02, 0x0a, 0x18, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x6e, 0x61,
	0x6c, 0x6f, 0x67, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x56, 0x6f, 0x6c, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x67, 0x6c, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x6c, 0x69, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x67, 0x6c, 0x69, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x68, 0x0a, 0x11, 0x47, 0x6c, 0x69, 0x74, 0x63, 0x68,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x74, 0x72, 0x69, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x69, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x72, 0x69,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x8d, 0x01, 0x0a,
	0x1b, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc0, 0x03, 0x0a,
	0x19, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x61, 0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x50, 0x75,
	0x6c, 0x73, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x6d, 0x61, 0x78, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22,
	0xe9, 0x02, 0x0a, 0x14, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x4d, 0x65, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x13,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61, 0x6c, 0x65,
	0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x60, 0x0a, 0x14, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x12, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x46,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x1a, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56,
	0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61, 0x6c, 0x65,
	0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x33, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x53,
	0x74, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x33, 0x0a, 0x12, 0x57, 0x61, 0x69, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x57, 0x61, 0x69, 0x74, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x30, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x22, 0x55, 0x0a, 0x10, 0x4c, 0x6f,
	0x61, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41,
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x4f, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x92, 0x02, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x73, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x0e, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x6f,
	0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x73, 0x6f, 0x38, 0x36, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x6f, 0x38, 0x36, 0x30,
	0x31, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x43, 0x73, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0xe8, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x44,
	0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0a,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x14, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x61, 0x6c,
	0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x64, 0x0a, 0x0d, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x61,
	0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x33, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x22, 0x15, 0x0a,
	0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x72, 0x0a, 0x1d, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a, 0x03, 0x0a, 0x1b, 0x41, 0x64, 0x64,
	0x48, 0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6c, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6c, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6c, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6c, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x6d, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61,
	0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x67,
	0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x48, 0x69, 0x67, 0x68,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x69, 0x67,
	0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x7e, 0x0a, 0x1e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x61, 0x64, 0x69,
	0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73,
	0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x61, 0x64, 0x69, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x61, 0x64, 0x69,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x19, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x73, 0x76, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x4f, 0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x38, 0x36, 0x30, 0x31, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x6f, 0x38, 0x36, 0x30, 0x31, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x19, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x73, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xb6, 0x01,
	0x0a, 0x1b, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x61, 0x64,
	0x69, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x61, 0x64,
	0x69, 0x78, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x2a, 0x83, 0x01, 0x0a, 0x0e, 0x54, 0x68, 0x69, 0x73, 0x41, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x48, 0x49, 0x53, 0x5f, 0x41, 0x50,
	0x49, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x48, 0x49, 0x53, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x48, 0x49, 0x53, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x48, 0x49, 0x53,
	0x5f, 0x41, 0x50, 0x49, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x00, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x86, 0x02, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x14, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x15, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x32, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x33, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10,
	0x34, 0x2a, 0x88, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x64, 0x69, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x52, 0x41, 0x44, 0x49, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x41, 0x44, 0x49, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x41, 0x44, 0x49, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x41,
	0x44, 0x49, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x58, 0x41, 0x44, 0x45, 0x43,
	0x49, 0x4d, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x44, 0x49, 0x58, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x43, 0x49, 0x49, 0x10, 0x04, 0x2a, 0xc7, 0x01, 0x0a,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x4f, 0x47, 0x49, 0x43, 0x5f, 0x34, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x38, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x31, 0x36, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43,
	0x5f, 0x50, 0x52, 0x4f, 0x5f, 0x38, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x52,
	0x4f, 0x5f, 0x31, 0x36, 0x10, 0x06, 0x2a, 0x5e, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e,
	0x41, 0x4c, 0x4f, 0x47, 0x10, 0x02, 0x2a, 0xc6, 0x01, 0x0a, 0x12, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x20, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41,
	0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x55, 0x4c, 0x53, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x44,
	0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x2a,
	0xb5, 0x01, 0x0a, 0x20, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x30, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x49,
	0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x49, 0x47, 0x49,
	0x54, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x32, 0xf8, 0x0c, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x61,
	0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0b, 0x57, 0x61, 0x69, 0x74, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x61, 0x6c,
	0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57,
	0x61, 0x69, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x25, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b,
	0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x2e,
	0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0c, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x2e, 0x73, 0x61,
	0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0b, 0x41,
	0x64, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x73, 0x61, 0x6c,
	0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x73, 0x61, 0x6c,
	0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x76,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x69,
	0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x69,
	0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x48, 0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x12, 0x31, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x43, 0x73, 0x76, 0x12, 0x2a, 0x2e, 0x73, 0x61,
	0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x43, 0x73, 0x76,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65,
	0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x43, 0x73, 0x76, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x73, 0x61, 0x6c,
	0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x61, 0x6c, 0x65,
	0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x73, 0x76, 0x12, 0x2c,
	0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x73, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73,
	0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x73, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x14, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x72, 0x12, 0x2e, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x42, 0x20, 0x0a, 0x06, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x65, 0x42, 0x0b, 0x53, 0x61,
	0x6c, 0x65, 0x61, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xa2, 0x02, 0x06, 0x53, 0x61,
	0x6c, 0x65, 0x61, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_saleae_proto_rawDescOnce sync.Once
	file_saleae_proto_rawDescData = file_saleae_proto_rawDesc
)

func file_saleae_proto_rawDescGZIP() []byte {
	file_saleae_proto_rawDescOnce.Do(func() {
		file_saleae_proto_rawDescData = protoimpl.X.CompressGZIP(file_saleae_proto_rawDescData)
	})
	return file_saleae_proto_rawDescData
}

var file_saleae_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_saleae_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_saleae_proto_goTypes = []interface{}{
	(ThisApiVersion)(0),                    // 0: saleae.automation.ThisApiVersion
	(ErrorCode)(0),                         // 1: saleae.automation.ErrorCode
	(RadixType)(0),                         // 2: saleae.automation.RadixType
	(DeviceType)(0),                        // 3: saleae.automation.DeviceType
	(ChannelType)(0),                       // 4: saleae.automation.ChannelType
	(DigitalTriggerType)(0),                // 5: saleae.automation.DigitalTriggerType
	(DigitalTriggerLinkedChannelState)(0),  // 6: saleae.automation.DigitalTriggerLinkedChannelState
	(*Version)(nil),                        // 7: saleae.automation.Version
	(*AppInfo)(nil),                        // 8: saleae.automation.AppInfo
	(*Device)(nil),                         // 9: saleae.automation.Device
	(*LogicChannels)(nil),                  // 10: saleae.automation.LogicChannels
	(*CaptureInfo)(nil),                    // 11: saleae.automation.CaptureInfo
	(*LogicDeviceConfiguration)(nil),       // 12: saleae.automation.LogicDeviceConfiguration
	(*GlitchFilterEntry)(nil),              // 13: saleae.automation.GlitchFilterEntry
	(*ManualCaptureMode)(nil),              // 14: saleae.automation.ManualCaptureMode
	(*TimedCaptureMode)(nil),               // 15: saleae.automation.TimedCaptureMode
	(*DigitalTriggerLinkedChannel)(nil),    // 16: saleae.automation.DigitalTriggerLinkedChannel
	(*DigitalTriggerCaptureMode)(nil),      // 17: saleae.automation.DigitalTriggerCaptureMode
	(*CaptureConfiguration)(nil),           // 18: saleae.automation.CaptureConfiguration
	(*GetDevicesRequest)(nil),              // 19: saleae.automation.GetDevicesRequest
	(*GetDevicesReply)(nil),                // 20: saleae.automation.GetDevicesReply
	(*StartCaptureRequest)(nil),            // 21: saleae.automation.StartCaptureRequest
	(*StartCaptureReply)(nil),              // 22: saleae.automation.StartCaptureReply
	(*StopCaptureRequest)(nil),             // 23: saleae.automation.StopCaptureRequest
	(*StopCaptureReply)(nil),               // 24: saleae.automation.StopCaptureReply
	(*WaitCaptureRequest)(nil),             // 25: saleae.automation.WaitCaptureRequest
	(*WaitCaptureReply)(nil),               // 26: saleae.automation.WaitCaptureReply
	(*LoadCaptureRequest)(nil),             // 27: saleae.automation.LoadCaptureRequest
	(*LoadCaptureReply)(nil),               // 28: saleae.automation.LoadCaptureReply
	(*SaveCaptureRequest)(nil),             // 29: saleae.automation.SaveCaptureRequest
	(*SaveCaptureReply)(nil),               // 30: saleae.automation.SaveCaptureReply
	(*CloseCaptureRequest)(nil),            // 31: saleae.automation.CloseCaptureRequest
	(*CloseCaptureReply)(nil),              // 32: saleae.automation.CloseCaptureReply
	(*ExportRawDataCsvRequest)(nil),        // 33: saleae.automation.ExportRawDataCsvRequest
	(*ExportRawDataCsvReply)(nil),          // 34: saleae.automation.ExportRawDataCsvReply
	(*ExportRawDataBinaryRequest)(nil),     // 35: saleae.automation.ExportRawDataBinaryRequest
	(*ExportRawDataBinaryReply)(nil),       // 36: saleae.automation.ExportRawDataBinaryReply
	(*AnalyzerSettingValue)(nil),           // 37: saleae.automation.AnalyzerSettingValue
	(*AddAnalyzerRequest)(nil),             // 38: saleae.automation.AddAnalyzerRequest
	(*AddAnalyzerReply)(nil),               // 39: saleae.automation.AddAnalyzerReply
	(*RemoveAnalyzerRequest)(nil),          // 40: saleae.automation.RemoveAnalyzerRequest
	(*RemoveAnalyzerReply)(nil),            // 41: saleae.automation.RemoveAnalyzerReply
	(*HighLevelAnalyzerSettingValue)(nil),  // 42: saleae.automation.HighLevelAnalyzerSettingValue
	(*AddHighLevelAnalyzerRequest)(nil),    // 43: saleae.automation.AddHighLevelAnalyzerRequest
	(*AddHighLevelAnalyzerReply)(nil),      // 44: saleae.automation.AddHighLevelAnalyzerReply
	(*RemoveHighLevelAnalyzerRequest)(nil), // 45: saleae.automation.RemoveHighLevelAnalyzerRequest
	(*RemoveHighLevelAnalyzerReply)(nil),   // 46: saleae.automation.RemoveHighLevelAnalyzerReply
	(*DataTableAnalyzerConfiguration)(nil), // 47: saleae.automation.DataTableAnalyzerConfiguration
	(*DataTableFilter)(nil),                // 48: saleae.automation.DataTableFilter
	(*ExportDataTableCsvRequest)(nil),      // 49: saleae.automation.ExportDataTableCsvRequest
	(*ExportDataTableCsvReply)(nil),        // 50: saleae.automation.ExportDataTableCsvReply
	(*LegacyExportAnalyzerRequest)(nil),    // 51: saleae.automation.LegacyExportAnalyzerRequest
	(*LegacyExportAnalyzerReply)(nil),      // 52: saleae.automation.LegacyExportAnalyzerReply
	(*GetAppInfoRequest)(nil),              // 53: saleae.automation.GetAppInfoRequest
	(*GetAppInfoReply)(nil),                // 54: saleae.automation.GetAppInfoReply
	nil,                                    // 55: saleae.automation.AddAnalyzerRequest.SettingsEntry
	nil,                                    // 56: saleae.automation.AddHighLevelAnalyzerRequest.SettingsEntry
}
var file_saleae_proto_depIdxs = []int32{
	7,  // 0: saleae.automation.AppInfo.api_version:type_name -> saleae.automation.Version
	3,  // 1: saleae.automation.Device.device_type:type_name -> saleae.automation.DeviceType
	10, // 2: saleae.automation.LogicDeviceConfiguration.logic_channels:type_name -> saleae.automation.LogicChannels
	13, // 3: saleae.automation.LogicDeviceConfiguration.glitch_filters:type_name -> saleae.automation.GlitchFilterEntry
	6,  // 4: saleae.automation.DigitalTriggerLinkedChannel.state:type_name -> saleae.automation.DigitalTriggerLinkedChannelState
	5,  // 5: saleae.automation.DigitalTriggerCaptureMode.trigger_type:type_name -> saleae.automation.DigitalTriggerType
	16, // 6: saleae.automation.DigitalTriggerCaptureMode.linked_channels:type_name -> saleae.automation.DigitalTriggerLinkedChannel
	14, // 7: saleae.automation.CaptureConfiguration.manual_capture_mode:type_name -> saleae.automation.ManualCaptureMode
	15, // 8: saleae.automation.CaptureConfiguration.timed_capture_mode:type_name -> saleae.automation.TimedCaptureMode
	17, // 9: saleae.automation.CaptureConfiguration.digital_capture_mode:type_name -> saleae.automation.DigitalTriggerCaptureMode
	9,  // 10: saleae.automation.GetDevicesReply.devices:type_name -> saleae.automation.Device
	12, // 11: saleae.automation.StartCaptureRequest.logic_device_configuration:type_name -> saleae.automation.LogicDeviceConfiguration
	18, // 12: saleae.automation.StartCaptureRequest.capture_configuration:type_name -> saleae.automation.CaptureConfiguration
	11, // 13: saleae.automation.StartCaptureReply.capture_info:type_name -> saleae.automation.CaptureInfo
	11, // 14: saleae.automation.LoadCaptureReply.capture_info:type_name -> saleae.automation.CaptureInfo
	10, // 15: saleae.automation.ExportRawDataCsvRequest.logic_channels:type_name -> saleae.automation.LogicChannels
	10, // 16: saleae.automation.ExportRawDataBinaryRequest.logic_channels:type_name -> saleae.automation.LogicChannels
	55, // 17: saleae.automation.AddAnalyzerRequest.settings:type_name -> saleae.automation.AddAnalyzerRequest.SettingsEntry
	56, // 18: saleae.automation.AddHighLevelAnalyzerRequest.settings:type_name -> saleae.automation.AddHighLevelAnalyzerRequest.SettingsEntry
	2,  // 19: saleae.automation.DataTableAnalyzerConfiguration.radix_type:type_name -> saleae.automation.RadixType
	47, // 20: saleae.automation.ExportDataTableCsvRequest.analyzers:type_name -> saleae.automation.DataTableAnalyzerConfiguration
	48, // 21: saleae.automation.ExportDataTableCsvRequest.filter:type_name -> saleae.automation.DataTableFilter
	2,  // 22: saleae.automation.LegacyExportAnalyzerRequest.radix_type:type_name -> saleae.automation.RadixType
	8,  // 23: saleae.automation.GetAppInfoReply.app_info:type_name -> saleae.automation.AppInfo
	37, // 24: saleae.automation.AddAnalyzerRequest.SettingsEntry.value:type_name -> saleae.automation.AnalyzerSettingValue
	42, // 25: saleae.automation.AddHighLevelAnalyzerRequest.SettingsEntry.value:type_name -> saleae.automation.HighLevelAnalyzerSettingValue
	53, // 26: saleae.automation.Manager.GetAppInfo:input_type -> saleae.automation.GetAppInfoRequest
	19, // 27: saleae.automation.Manager.GetDevices:input_type -> saleae.automation.GetDevicesRequest
	21, // 28: saleae.automation.Manager.StartCapture:input_type -> saleae.automation.StartCaptureRequest
	23, // 29: saleae.automation.Manager.StopCapture:input_type -> saleae.automation.StopCaptureRequest
	25, // 30: saleae.automation.Manager.WaitCapture:input_type -> saleae.automation.WaitCaptureRequest
	27, // 31: saleae.automation.Manager.LoadCapture:input_type -> saleae.automation.LoadCaptureRequest
	29, // 32: saleae.automation.Manager.SaveCapture:input_type -> saleae.automation.SaveCaptureRequest
	31, // 33: saleae.automation.Manager.CloseCapture:input_type -> saleae.automation.CloseCaptureRequest
	38, // 34: saleae.automation.Manager.AddAnalyzer:input_type -> saleae.automation.AddAnalyzerRequest
	40, // 35: saleae.automation.Manager.RemoveAnalyzer:input_type -> saleae.automation.RemoveAnalyzerRequest
	43, // 36: saleae.automation.Manager.AddHighLevelAnalyzer:input_type -> saleae.automation.AddHighLevelAnalyzerRequest
	45, // 37: saleae.automation.Manager.RemoveHighLevelAnalyzer:input_type -> saleae.automation.RemoveHighLevelAnalyzerRequest
	33, // 38: saleae.automation.Manager.ExportRawDataCsv:input_type -> saleae.automation.ExportRawDataCsvRequest
	35, // 39: saleae.automation.Manager.ExportRawDataBinary:input_type -> saleae.automation.ExportRawDataBinaryRequest
	49, // 40: saleae.automation.Manager.ExportDataTableCsv:input_type -> saleae.automation.ExportDataTableCsvRequest
	51, // 41: saleae.automation.Manager.LegacyExportAnalyzer:input_type -> saleae.automation.LegacyExportAnalyzerRequest
	54, // 42: saleae.automation.Manager.GetAppInfo:output_type -> saleae.automation.GetAppInfoReply
	20, // 43: saleae.automation.Manager.GetDevices:output_type -> saleae.automation.GetDevicesReply
	22, // 44: saleae.automation.Manager.StartCapture:output_type -> saleae.automation.StartCaptureReply
	24, // 45: saleae.automation.Manager.StopCapture:output_type -> saleae.automation.StopCaptureReply
	26, // 46: saleae.automation.Manager.WaitCapture:output_type -> saleae.automation.WaitCaptureReply
	28, // 47: saleae.automation.Manager.LoadCapture:output_type -> saleae.automation.LoadCaptureReply
	30, // 48: saleae.automation.Manager.SaveCapture:output_type -> saleae.automation.SaveCaptureReply
	32, // 49: saleae.automation.Manager.CloseCapture:output_type -> saleae.automation.CloseCaptureReply
	39, // 50: saleae.automation.Manager.AddAnalyzer:output_type -> saleae.automation.AddAnalyzerReply
	41, // 51: saleae.automation.Manager.RemoveAnalyzer:output_type -> saleae.automation.RemoveAnalyzerReply
	44, // 52: saleae.automation.Manager.AddHighLevelAnalyzer:output_type -> saleae.automation.AddHighLevelAnalyzerReply
	46, // 53: saleae.automation.Manager.RemoveHighLevelAnalyzer:output_type -> saleae.automation.RemoveHighLevelAnalyzerReply
	34, // 54: saleae.automation.Manager.ExportRawDataCsv:output_type -> saleae.automation.ExportRawDataCsvReply
	36, // 55: saleae.automation.Manager.ExportRawDataBinary:output_type -> saleae.automation.ExportRawDataBinaryReply
	50, // 56: saleae.automation.Manager.ExportDataTableCsv:output_type -> saleae.automation.ExportDataTableCsvReply
	52, // 57: saleae.automation.Manager.LegacyExportAnalyzer:output_type -> saleae.automation.LegacyExportAnalyzerReply
	42, // [42:58] is the sub-list for method output_type
	26, // [26:42] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_saleae_proto_init() }
func file_saleae_proto_init() {
	if File_saleae_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_saleae_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicDeviceConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlitchFilterEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualCaptureMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimedCaptureMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalTriggerLinkedChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DigitalTriggerCaptureMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevicesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartCaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartCaptureReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCaptureReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitCaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitCaptureReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCaptureReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveCaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveCaptureReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseCaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseCaptureReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportRawDataCsvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportRawDataCsvReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportRawDataBinaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportRawDataBinaryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzerSettingValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAnalyzerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAnalyzerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAnalyzerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAnalyzerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighLevelAnalyzerSettingValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHighLevelAnalyzerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHighLevelAnalyzerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHighLevelAnalyzerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHighLevelAnalyzerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTableAnalyzerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTableFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportDataTableCsvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportDataTableCsvReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegacyExportAnalyzerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegacyExportAnalyzerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_saleae_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_saleae_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*LogicDeviceConfiguration_LogicChannels)(nil),
	}
	file_saleae_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*CaptureConfiguration_ManualCaptureMode)(nil),
		(*CaptureConfiguration_TimedCaptureMode)(nil),
		(*CaptureConfiguration_DigitalCaptureMode)(nil),
	}
	file_saleae_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*StartCaptureRequest_LogicDeviceConfiguration)(nil),
	}
	file_saleae_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*ExportRawDataCsvRequest_LogicChannels)(nil),
	}
	file_saleae_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*ExportRawDataBinaryRequest_LogicChannels)(nil),
	}
	file_saleae_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*AnalyzerSettingValue_StringValue)(nil),
		(*AnalyzerSettingValue_Int64Value)(nil),
		(*AnalyzerSettingValue_BoolValue)(nil),
		(*AnalyzerSettingValue_DoubleValue)(nil),
	}
	file_saleae_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*HighLevelAnalyzerSettingValue_StringValue)(nil),
		(*HighLevelAnalyzerSettingValue_NumberValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_saleae_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_saleae_proto_goTypes,
		DependencyIndexes: file_saleae_proto_depIdxs,
		EnumInfos:         file_saleae_proto_enumTypes,
		MessageInfos:      file_saleae_proto_msgTypes,
	}.Build()
	File_saleae_proto = out.File
	file_saleae_proto_rawDesc = nil
	file_saleae_proto_goTypes = nil
	file_saleae_proto_depIdxs = nil
}
